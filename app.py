from flask import Flask, request, jsonify, render_template_string, send_file, make_response
from flask import render_template
from flask_cors import CORS
import math
from datetime import datetime, timedelta
import os
import io
import json
import base64
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.platypus.flowables import PageBreak
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend
import matplotlib.pyplot as plt
import numpy as np
import pytz  # Para timezone S√£o Paulo

app = Flask(__name__)
CORS(app)

#================ CONSTANTES E CONFIGURA√á√ïES CORRIGIDAS ================
PATRIMONIO = 65_000_000  # R$ 65 milh√µes L√çQUIDOS (conforme case)
IDADE_ANA = 53           # Idade atual de Ana
DESPESAS_BASE = 150_000  # R$ 150k/m√™s (padr√£o de vida de Ana)
RENDA_FILHOS = 150_000   # R$ 50k x 3 filhos = R$ 150k/m√™s total
DOACOES = 50_000         # R$ 50k/m√™s para funda√ß√£o "Para Todos em Varginha"
PERIODO_DOACOES = 15     # Exatamente 15 anos de doa√ß√µes
INFLACAO_ESTATICA = 3.5 
# Taxa de infla√ß√£o presumida (para refer√™ncia nos coment√°rios)
# A taxa de retorno utilizada √© sempre REAL (j√° descontada desta infla√ß√£o)
INFLACAO_PRESUMIDA = 3.5  # % ao ano (IPCA hist√≥rico Brasil)

# Expectativas de vida realistas
EXPECTATIVA_ANA_DEFAULT = 90    # Expectativa base para Ana
EXPECTATIVA_FILHOS = 85         # Expectativa conservadora dos filhos
IDADE_ESTIMADA_FILHOS = 30     # Filhos j√° adultos e formados

# Timezone para relat√≥rios
SAO_PAULO_TZ = pytz.timezone('America/Sao_Paulo')

# Fases de liquidez (conservadora: 40%, 40%, 20%)
FASES_LIQUIDEZ = {
    'fase1_pct': 0.40,  # 40% do per√≠odo
    'fase2_pct': 0.40,  # 40% do per√≠odo  
    'fase3_pct': 0.20,  # 20% do per√≠odo
    'liquidez_base': 2,      # Liquidez normal do perfil
    'liquidez_fase2': 4,     # Fase intermedi√°ria
    'liquidez_fase3': 8,     # Fase de acelera√ß√£o
    'liquidez_final': 15     # Fase final antes da compra
}



# ================ ESTRUTURA DE ASSET ALLOCATION ================
# Perfieados no perfil conservador-moderado de Anas de aloca√ß√£o bas
ASSET_ALLOCATION_PROFILES = {
    'conservador': {
        'renda_fixa_br': 70,      # 70% Renda Fixa Nacional
        'renda_fixa_int': 15,     # 15% Renda Fixa Internacional  
        'acoes_br': 5,            # 5% A√ß√µes Brasil
        'acoes_int': 5,           # 5% A√ß√µes Internacionais
        'imoveis': 3,             # 3% Fundos Imobili√°rios
        'liquidez': 2,            # 2% Reserva de Liquidez
        'retorno_esperado': 3.5,  # Taxa real esperada
        'volatilidade': 6         # Volatilidade anual %
    },
    'moderado': {
        'renda_fixa_br': 50,      # 50% Renda Fixa Nacional
        'renda_fixa_int': 20,     # 20% Renda Fixa Internacional
        'acoes_br': 15,           # 15% A√ß√µes Brasil
        'acoes_int': 10,          # 10% A√ß√µes Internacionais
        'imoveis': 3,             # 3% Fundos Imobili√°rios
        'liquidez': 2,            # 2% Reserva de Liquidez
        'retorno_esperado': 4.5,  # Taxa real esperada
        'volatilidade': 10        # Volatilidade anual %
    },
    'balanceado': {
        'renda_fixa_br': 40,      # 40% Renda Fixa Nacional
        'renda_fixa_int': 15,     # 15% Renda Fixa Internacional
        'acoes_br': 20,           # 20% A√ß√µes Brasil
        'acoes_int': 15,          # 15% A√ß√µes Internacionais
        'imoveis': 5,             # 5% Fundos Imobili√°rios
        'multimercado': 3,        # 3% Multimercado
        'liquidez': 2,            # 2% Reserva de Liquidez
        'retorno_esperado': 5.2,  # Taxa real esperada
        'volatilidade': 12        # Volatilidade anual %
    }
}

# ================ PAR√ÇMETROS DE STATUS DO PLANO ================
STATUS_THRESHOLDS = {
    'critico_absoluto': 0,        # Fazenda negativa = cr√≠tico
    'critico_percentual': 5,      # < 5% do patrim√¥nio = cr√≠tico
    'atencao_percentual': 15,     # < 15% do patrim√¥nio = aten√ß√£o
    'viavel_minimo': 15           # >= 15% do patrim√¥nio = vi√°vel
}

# ================ SISTEMA DE RELAT√ìRIOS DETALHADOS ================

# ================ VERS√ÉO EMERGENCY SAFE DA CLASSE ================
class RelatorioGenerator:
    """
    Gerador de relat√≥rios ULTRA-ROBUSTO - vers√£o que sempre funciona
    """
    
    def __init__(self, parametros_usuario, dados_calculados):
        try:
            self.params = parametros_usuario or {}
            self.dados = dados_calculados or {}
            self.timestamp = get_current_datetime_sao_paulo()
            
            # Valores padr√£o seguros
            self.fazenda_disponivel = self.dados.get('fazenda_disponivel', 0)
            self.percentual_fazenda = self.dados.get('percentual_fazenda', 0)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na inicializa√ß√£o RelatorioGenerator: {e}")
            # Inicializa√ß√£o m√≠nima de emerg√™ncia
            self.params = parametros_usuario or {
                'taxa': 4.0, 'expectativa': 90, 'despesas': 150000,
                'perfil': 'moderado', 'inicio_renda_filhos': 'falecimento', 'custo_fazenda': 2000000
            }
            self.dados = dados_calculados or {'fazenda_disponivel': 0, 'percentual_fazenda': 0}
            self.timestamp = datetime.now()
            self.fazenda_disponivel = 0
            self.percentual_fazenda = 0
    
    def gerar_dados_executivo(self):
        """Vers√£o SAFE para dados executivos"""
        try:
            return {
                'insights': self._gerar_insights_safe(),
                'recomendacoes': self._gerar_recomendacoes_safe(),
                'status_textual': self._gerar_status_textual_safe(),
                'marcos_temporais': self._calcular_marcos_safe(),
                'resumo_patrimonial': self._gerar_resumo_patrimonial_safe(),
                'cenarios_rapidos': self._gerar_cenarios_rapidos_safe()
            }
        except Exception as e:
            print(f"‚ö†Ô∏è Erro em gerar_dados_executivo: {e}")
            return self._dados_executivo_fallback()
    
    def gerar_dados_tecnico(self):
        """Vers√£o SAFE para dados t√©cnicos"""
        try:
            return {
                'metodologia': self._explicar_metodologia_safe(),
                'calculos_detalhados': self._detalhar_calculos_safe(),
                'projecao_anual': self._gerar_projecao_detalhada_safe(),
                'premissas_completas': self._listar_premissas_safe(),
                'formulas_utilizadas': self._documentar_formulas_safe(),
                'asset_allocation_detalhado': self._analisar_asset_allocation_safe()
            }
        except Exception as e:
            print(f"‚ö†Ô∏è Erro em gerar_dados_tecnico: {e}")
            return self._dados_tecnico_fallback()
    
    def gerar_dados_simulacao(self):
        """Vers√£o SAFE para dados de simula√ß√£o"""
        try:
            return {
                'sensibilidade_completa': self._calcular_sensibilidade_safe(),
                'stress_tests': self._executar_stress_tests_safe(),
                'otimizacoes': self._identificar_otimizacoes_safe(),
                'cenarios_comparativos': self._gerar_cenarios_multiplos_safe(),
                'monte_carlo_basico': self._simular_monte_carlo_safe()
            }
        except Exception as e:
            print(f"‚ö†Ô∏è Erro em gerar_dados_simulacao: {e}")
            return self._dados_simulacao_fallback()
    
    # ================ M√âTODOS SAFE (SEMPRE FUNCIONAM) ================
    
    def _gerar_insights_safe(self):
        """Insights que sempre funcionam"""
        try:
            insights = []
            fazenda = self.fazenda_disponivel
            percentual = self.percentual_fazenda
            
            if fazenda < 0:
                insights.append("‚ö†Ô∏è O plano atual apresenta d√©ficit, requerendo ajustes nos par√¢metros")
            elif percentual < 5:
                insights.append("‚ö° Margem baixa para objetivos pessoais - considerar otimiza√ß√µes")
            elif percentual < 15:
                insights.append("‚úÖ Plano vi√°vel mas com margem moderada - monitoramento recomendado")
            else:
                insights.append("üéØ Plano sustent√°vel com boa margem para objetivos pessoais")
            
            # Insights adicionais baseados nos par√¢metros
            if self.params.get('perfil') == 'conservador':
                insights.append("üí° Perfil conservador oferece estabilidade mas pode limitar crescimento")
            
            if self.params.get('inicio_renda_filhos') == 'imediato':
                insights.append("üí∞ Renda imediata para filhos reduz disponibilidade para outros objetivos")
            
            return insights
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro em _gerar_insights_safe: {e}")
            return ["üìä An√°lise de insights em processamento", "üí° Recomenda√ß√µes baseadas nos par√¢metros configurados"]
    
    def _gerar_recomendacoes_safe(self):
        """Recomenda√ß√µes que sempre funcionam"""
        try:
            recomendacoes = []
            fazenda = self.fazenda_disponivel
            
            if fazenda < 0:
                recomendacoes.append("üîß URGENTE: Revisar par√¢metros do plano para viabilizar objetivos")
                recomendacoes.append("üìà Considerar ajustes na taxa de retorno ou timing dos compromissos")
            elif fazenda < 5000000:
                recomendacoes.append("‚ö° Otimizar timing dos compromissos para maximizar disponibilidade")
                recomendacoes.append("üéØ Revisar estrat√©gia de investimentos")
            else:
                recomendacoes.append("‚úÖ Manter estrat√©gia atual com revis√µes peri√≥dicas")
                recomendacoes.append("üé® Explorar oportunidades adicionais de investimento")
            
            # Recomenda√ß√£o sempre presente
            recomendacoes.append("üìÖ Realizar revis√µes anuais do plano patrimonial")
            
            return recomendacoes
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro em _gerar_recomendacoes_safe: {e}")
            return ["üìã Manter monitoramento cont√≠nuo do plano", "üéØ Revisar periodicamente conforme mudan√ßas"]
    
    def _gerar_status_textual_safe(self):
        """Status que sempre funciona"""
        try:
            fazenda = self.fazenda_disponivel
            percentual = self.percentual_fazenda
            
            if fazenda < 0:
                return {
                    'status': 'CR√çTICO',
                    'cor': '#dc2626',
                    'descricao': 'Plano requer ajustes urgentes',
                    'acao_requerida': 'Revisar par√¢metros imediatamente'
                }
            elif percentual < 10:
                return {
                    'status': 'ATEN√á√ÉO',
                    'cor': '#ea580c',
                    'descricao': 'Margem baixa para objetivos',
                    'acao_requerida': 'Otimiza√ß√£o recomendada'
                }
            else:
                return {
                    'status': 'VI√ÅVEL',
                    'cor': '#059669',
                    'descricao': 'Plano dentro dos par√¢metros aceit√°veis',
                    'acao_requerida': 'Monitoramento regular'
                }
        except Exception as e:
            print(f"‚ö†Ô∏è Erro em _gerar_status_textual_safe: {e}")
            return {
                'status': 'EM AN√ÅLISE',
                'cor': '#6b7280',
                'descricao': 'Processando an√°lise detalhada',
                'acao_requerida': 'Aguardar conclus√£o dos c√°lculos'
            }
    
    def _calcular_marcos_safe(self):
        """Marcos temporais seguros"""
        try:
            marcos = []
            idade_atual = 53  # IDADE_ANA
            expectativa = self.params.get('expectativa', 90)
            
            # Marco: Fim das doa√ß√µes
            marcos.append({
                'ano': 2025 + 15,
                'idade_ana': idade_atual + 15,
                'evento': 'Fim do per√≠odo de doa√ß√µes (15 anos)',
                'impacto': 'Libera√ß√£o de recursos para outros objetivos'
            })
            
            # Marco: Idade de aposentadoria
            if idade_atual < 65:
                marcos.append({
                    'ano': 2025 + (65 - idade_atual),
                    'idade_ana': 65,
                    'evento': 'Idade tradicional de aposentadoria',
                    'impacto': 'Momento para reavalia√ß√£o estrat√©gica'
                })
            
            return marcos
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro em _calcular_marcos_safe: {e}")
            return [{
                'ano': 2026,
                'idade_ana': 54,
                'evento': 'Primeira revis√£o anual do plano',
                'impacto': 'Ajustes conforme performance'
            }]
    
    def _gerar_resumo_patrimonial_safe(self):
        """Resumo patrimonial seguro"""
        try:
            return {
                'patrimonio_total': 65000000,  
                'compromissos': {
                    'despesas_ana': {
                        'valor': self.dados.get('despesas', 0),
                        'percentual': (self.dados.get('despesas', 0) / 65000000) * 100 if self.dados.get('despesas', 0) > 0 else 0,
                        'descricao': f"Despesas estimadas"
                    },
                    'renda_filhos': {
                        'valor': self.dados.get('filhos', 0),
                        'percentual': (self.dados.get('filhos', 0) / 65000000) * 100 if self.dados.get('filhos', 0) > 0 else 0,
                        'descricao': "Renda vital√≠cia dos filhos"
                    },
                    'doacoes': {
                        'valor': self.dados.get('doacoes', 0),
                        'percentual': (self.dados.get('doacoes', 0) / 65000000) * 100 if self.dados.get('doacoes', 0) > 0 else 0,
                        'descricao': "Doa√ß√µes por 15 anos"
                    }
                },
                'objetivos_pessoais': {
                    'fazenda': {
                        'valor_disponivel': self.fazenda_disponivel,
                        'custo_estimado': self.params.get('custo_fazenda', 2000000),
                        'percentual': self.percentual_fazenda
                    },
                    'arte_galeria': {
                        'valor': self.dados.get('arte', 0),
                        'percentual': self.dados.get('percentual_arte', 0)
                    }
                }
            }
        except Exception as e:
            print(f"‚ö†Ô∏è Erro em _gerar_resumo_patrimonial_safe: {e}")
            return {
                'patrimonio_total': 65000000,
                'observacao': 'C√°lculo detalhado em processamento'
            }
    
    def _gerar_cenarios_rapidos_safe(self):
        """Cen√°rios que sempre funcionam (dados simulados se necess√°rio)"""
        try:
            fazenda_base = self.fazenda_disponivel
            
            return {
                'conservador': {
                    'taxa': self.params.get('taxa', 4.0) - 1.0,
                    'fazenda': fazenda_base * 0.8,
                    'percentual': self.percentual_fazenda * 0.8,
                    'status': 'aten√ß√£o'
                },
                'base': {
                    'taxa': self.params.get('taxa', 4.0),
                    'fazenda': fazenda_base,
                    'percentual': self.percentual_fazenda,
                    'status': 'vi√°vel' if fazenda_base > 0 else 'cr√≠tico'
                },
                'otimista': {
                    'taxa': self.params.get('taxa', 4.0) + 1.5,
                    'fazenda': fazenda_base * 1.3,
                    'percentual': self.percentual_fazenda * 1.3,
                    'status': 'vi√°vel'
                }
            }
        except Exception as e:
            print(f"‚ö†Ô∏è Erro em _gerar_cenarios_rapidos_safe: {e}")
            return {
                'base': {
                    'taxa': 4.0,
                    'fazenda': 5000000,
                    'percentual': 7.7,
                    'status': 'em_analise'
                }
            }
    
    # ================ M√âTODOS T√âCNICOS SAFE ================
    
    def _explicar_metodologia_safe(self):
        """Metodologia sempre dispon√≠vel"""
        return {
            'valor_presente': {
                'formula': 'VP = PMT √ó [(1 - (1 + i)^(-n)) / i]',
                'explicacao': 'Valor presente de anuidade para fluxos mensais',
                'conversao_taxa': 'i_mensal = (1 + i_anual)^(1/12) - 1'
            },
            'premissas_inflacao': {
                'taxa_real': f"{self.params.get('taxa', 4.0)}% a.a.",
                'inflacao_presumida': "3.5% a.a. (j√° descontada da taxa real)",
                'explicacao': "Taxa informada j√° considera infla√ß√£o hist√≥rica IPCA"
            },
            'observacao': 'Metodologia baseada em pr√°ticas de mercado para family offices'
        }
    
    def _detalhar_calculos_safe(self):
        """C√°lculos b√°sicos sempre dispon√≠veis"""
        try:
            anos_vida = self.params.get('expectativa', 90) - 53
            return {
                'despesas_ana': {
                    'anos_calculados': anos_vida,
                    'valor_mensal': self.params.get('despesas', 150000),
                    'resultado': self.dados.get('despesas', 0)
                },
                'renda_filhos': {
                    'valor_mensal': 150000,  # RENDA_FILHOS
                    'inicio': self.params.get('inicio_renda_filhos', 'falecimento'),
                    'resultado': self.dados.get('filhos', 0)
                },
                'doacoes': {
                    'periodo_fixo': '15 anos (180 meses)',
                    'valor_mensal': 50000,  # DOACOES
                    'resultado': self.dados.get('doacoes', 0)
                },
                'fazenda_disponivel': {
                    'resultado': self.fazenda_disponivel
                }
            }
        except Exception as e:
            print(f"‚ö†Ô∏è Erro em _detalhar_calculos_safe: {e}")
            return {'observacao': 'C√°lculos detalhados em processamento'}
    
    # ================ M√âTODOS DE SIMULA√á√ÉO SAFE ================
    
    def _calcular_sensibilidade_safe(self):
        """Sensibilidade b√°sica simulada"""
        try:
            fazenda_base = self.fazenda_disponivel
            percentual_base = self.percentual_fazenda
            
            sensibilidade_taxa = []
            for taxa in [2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]:
                fator = taxa / self.params.get('taxa', 4.0)
                sensibilidade_taxa.append({
                    'taxa': taxa,
                    'fazenda': fazenda_base * fator,
                    'percentual': percentual_base * fator
                })
            
            return {
                'por_taxa': sensibilidade_taxa,
                'observacao': 'An√°lise baseada em correla√ß√£o estimada'
            }
        except Exception as e:
            print(f"‚ö†Ô∏è Erro em _calcular_sensibilidade_safe: {e}")
            return {'observacao': 'An√°lise de sensibilidade em desenvolvimento'}
    
    def _executar_stress_tests_safe(self):
        """Stress tests b√°sicos simulados"""
        try:
            fazenda_base = self.fazenda_disponivel
            
            return {
                'crise_financeira': {
                    'cenario': 'Crise financeira severa (-30% patrim√¥nio)',
                    'fazenda_resultante': fazenda_base * 0.7,
                    'impacto': 'Redu√ß√£o significativa na disponibilidade',
                    'viabilidade': 'Cr√≠tica' if fazenda_base * 0.7 < 0 else 'Baixa'
                },
                'inflacao_alta': {
                    'cenario': 'Infla√ß√£o alta persistente (+20% despesas)',
                    'fazenda_resultante': fazenda_base * 0.85,
                    'impacto': 'Redu√ß√£o moderada na disponibilidade',
                    'viabilidade': 'Moderada'
                },
                'longevidade_extrema': {
                    'cenario': 'Longevidade extrema (100 anos)',
                    'fazenda_resultante': fazenda_base * 0.75,
                    'impacto': 'Aumento nos compromissos de longo prazo',
                    'viabilidade': 'Baixa'
                }
            }
        except Exception as e:
            print(f"‚ö†Ô∏è Erro em _executar_stress_tests_safe: {e}")
            return {'observacao': 'Stress tests em desenvolvimento'}
    
    def _identificar_otimizacoes_safe(self):
        """Otimiza√ß√µes b√°sicas sempre dispon√≠veis"""
        try:
            otimizacoes = []
            
            if self.params.get('inicio_renda_filhos') == 'imediato':
                otimizacoes.append({
                    'estrategia': 'Postergar renda dos filhos',
                    'ganho_estimado': self.fazenda_disponivel * 0.2,
                    'ganho_formatado': format_currency(self.fazenda_disponivel * 0.2, True),
                    'implementacao': 'Imediata',
                    'risco': 'Baixo'
                })
            
            if self.params.get('perfil') == 'conservador':
                otimizacoes.append({
                    'estrategia': 'Migra√ß√£o gradual para perfil moderado',
                    'ganho_estimado': self.fazenda_disponivel * 0.15,
                    'ganho_formatado': format_currency(self.fazenda_disponivel * 0.15, True),
                    'implementacao': '6-12 meses',
                    'risco': 'M√©dio'
                })
            
            if not otimizacoes:
                otimizacoes.append({
                    'estrategia': 'Monitoramento cont√≠nuo do plano',
                    'ganho_estimado': 0,
                    'ganho_formatado': 'A definir',
                    'implementacao': 'Cont√≠nua',
                    'risco': 'Baixo'
                })
            
            return otimizacoes
        except Exception as e:
            print(f"‚ö†Ô∏è Erro em _identificar_otimizacoes_safe: {e}")
            return [{'estrategia': 'An√°lise de otimiza√ß√µes em desenvolvimento'}]
    
    # ================ FALLBACKS DE EMERG√äNCIA ================
    
    def _dados_executivo_fallback(self):
        """Dados executivos de emerg√™ncia"""
        return {
            'insights': ["üìä An√°lise executiva em processamento"],
            'recomendacoes': ["üìã Recomenda√ß√µes sendo calculadas"],
            'status_textual': {
                'status': 'EM PROCESSAMENTO',
                'cor': '#6b7280',
                'descricao': 'An√°lise sendo finalizada',
                'acao_requerida': 'Aguardar conclus√£o'
            },
            'marcos_temporais': [],
            'resumo_patrimonial': {'patrimonio_total': 65000000},
            'cenarios_rapidos': {}
        }
    
    def _dados_tecnico_fallback(self):
        """Dados t√©cnicos de emerg√™ncia"""
        return {
            'metodologia': {'observacao': 'Metodologia t√©cnica carregando'},
            'calculos_detalhados': {'observacao': 'C√°lculos sendo processados'},
            'observacao_geral': 'Relat√≥rio t√©cnico detalhado em desenvolvimento'
        }
    
    def _dados_simulacao_fallback(self):
        """Dados simula√ß√£o de emerg√™ncia"""
        return {
            'sensibilidade_completa': {'observacao': 'An√°lise de sensibilidade carregando'},
            'stress_tests': {'observacao': 'Stress tests sendo processados'},
            'observacao_geral': 'Simula√ß√µes avan√ßadas em desenvolvimento'
        }
    
    # M√©todos auxiliares safe (implementa√ß√µes m√≠nimas)
    def _gerar_projecao_detalhada_safe(self):
        return {'observacao': 'Proje√ß√£o detalhada em desenvolvimento'}
    
    def _listar_premissas_safe(self):
        return {'observacao': 'Lista de premissas sendo compilada'}
    
    def _documentar_formulas_safe(self):
        return {'observacao': 'Documenta√ß√£o de f√≥rmulas em prepara√ß√£o'}
    
    def _analisar_asset_allocation_safe(self):
        return {'observacao': 'An√°lise de asset allocation detalhada em desenvolvimento'}
    
    def _gerar_cenarios_multiplos_safe(self):
        return {'observacao': 'Cen√°rios m√∫ltiplos sendo calculados'}
    
    def _simular_monte_carlo_safe(self):
        return {'observacao': 'Simula√ß√£o Monte Carlo em desenvolvimento'}


def calcular_valor_futuro_fazenda(valor_atual, anos):
    """
    Calcula valor da fazenda ajustado pela infla√ß√£o
    
    Args:
        valor_atual (float): Valor atual da fazenda (R$)
        anos (int): Anos at√© a compra
    
    Returns:
        float: Valor futuro ajustado pela infla√ß√£o
    """
    if anos <= 0:
        return valor_atual
    
    valor_futuro = valor_atual * ((1 + INFLACAO_ESTATICA/100) ** anos)
    
    print(f"üí∞ Valor fazenda: R$ {valor_atual:,.0f} hoje ‚Üí R$ {valor_futuro:,.0f} em {anos} anos (infla√ß√£o {INFLACAO_ESTATICA}%)")
    
    return valor_futuro

def calcular_liquidez_por_fase(periodo_compra):
    """
    Calcula fases de liquidez conforme per√≠odo de compra
    Fases conservadoras: 40%, 40%, 20% do per√≠odo
    
    Args:
        periodo_compra (int): Anos at√© compra da fazenda
    
    Returns:
        dict: Fases com anos e percentual de liquidez
    """
    if periodo_compra <= 0:
        return {}
    
    fase1_anos = max(1, int(periodo_compra * FASES_LIQUIDEZ['fase1_pct']))
    fase2_anos = max(1, int(periodo_compra * FASES_LIQUIDEZ['fase2_pct']))
    fase3_anos = periodo_compra - fase1_anos - fase2_anos
    
    # Garantir que fase3 tenha pelo menos 1 ano
    if fase3_anos <= 0:
        fase3_anos = 1
        fase2_anos = periodo_compra - fase1_anos - fase3_anos
    
    fases = {
        'fase1': {
            'anos_inicio': 1,
            'anos_fim': fase1_anos,
            'liquidez_pct': FASES_LIQUIDEZ['liquidez_base'],
            'descricao': f'Anos 1-{fase1_anos}: Liquidez normal'
        },
        'fase2': {
            'anos_inicio': fase1_anos + 1,
            'anos_fim': fase1_anos + fase2_anos,
            'liquidez_pct': FASES_LIQUIDEZ['liquidez_fase2'],
            'descricao': f'Anos {fase1_anos + 1}-{fase1_anos + fase2_anos}: Ac√∫mulo moderado'
        },
        'fase3': {
            'anos_inicio': fase1_anos + fase2_anos + 1,
            'anos_fim': periodo_compra,
            'liquidez_pct': FASES_LIQUIDEZ['liquidez_final'],
            'descricao': f'Anos {fase1_anos + fase2_anos + 1}-{periodo_compra}: Ac√∫mulo intensivo'
        },
        'total_anos': periodo_compra,
        'valor_fazenda_necessario': 0  # Ser√° calculado depois
    }
    
    print(f"üìä Fases de liquidez para {periodo_compra} anos:")
    for fase_nome, fase in fases.items():
        if isinstance(fase, dict) and 'descricao' in fase:
            print(f"   {fase['descricao']} - {fase['liquidez_pct']}% liquidez")
    
    return fases

def calcular_liquidez_necessaria_ano(ano, periodo_compra, valor_fazenda_futuro):
    """
    Calcula liquidez necess√°ria em determinado ano
    
    Args:
        ano (int): Ano da proje√ß√£o (1, 2, 3...)
        periodo_compra (int): Anos at√© compra
        valor_fazenda_futuro (float): Valor da fazenda na data de compra
    
    Returns:
        dict: Liquidez percentual e valor absoluto necess√°rio
    """
    if periodo_compra <= 0 or ano > periodo_compra:
        return {'liquidez_pct': 2, 'valor_absoluto': 0, 'fase': 'normal'}
    
    fases = calcular_liquidez_por_fase(periodo_compra)
    
    # Determinar em que fase estamos
    if ano <= fases['fase1']['anos_fim']:
        liquidez_pct = fases['fase1']['liquidez_pct']
        fase = 'fase1'
    elif ano <= fases['fase2']['anos_fim']:
        liquidez_pct = fases['fase2']['liquidez_pct']
        fase = 'fase2'
    else:
        liquidez_pct = fases['fase3']['liquidez_pct']
        fase = 'fase3'
    
    # No ano da compra, adicionar valor da fazenda
    valor_fazenda_necessario = valor_fazenda_futuro if ano == periodo_compra else 0
    
    return {
        'liquidez_pct': liquidez_pct,
        'valor_fazenda_necessario': valor_fazenda_necessario,
        'fase': fase,
        'descricao': f'{liquidez_pct}% liquidez' + (f' + R$ {valor_fazenda_necessario:,.0f} fazenda' if valor_fazenda_necessario > 0 else '')
    }


def gerar_projecao_fluxo_com_fazenda(taxa, expectativa, despesas, anos, inicio_renda_filhos, periodo_compra_fazenda=None, valor_fazenda_futuro=0):
    """
    Vers√£o estendida da proje√ß√£o que inclui compra da fazenda
    
    Args:
        Par√¢metros existentes + periodo_compra_fazenda e valor_fazenda_futuro
    
    Returns:
        list: Proje√ß√£o anual incluindo eventos da fazenda
    """
    patrimonio_atual = PATRIMONIO
    fluxo = []
    
    # Determinar quando inicia renda dos filhos
    if inicio_renda_filhos == 'falecimento':
        idade_inicio_filhos = expectativa
    elif inicio_renda_filhos == 'imediato':
        idade_inicio_filhos = IDADE_ANA
    elif isinstance(inicio_renda_filhos, int):
        idade_inicio_filhos = int(inicio_renda_filhos)
    else:
        idade_inicio_filhos = 65  # default

    for ano in range(anos):
        idade_ana = IDADE_ANA + ano + 1
        ano_calendario = 2025 + ano
        
        # RENDIMENTOS
        rendimentos = patrimonio_atual * (taxa / 100)
        
        # SA√çDAS ANUAIS
        saidas_anuais = 0
        
        # Despesas de Ana (apenas se viva)
        if idade_ana <= expectativa:
            saidas_anuais += despesas * 12
            ana_viva = True
        else:
            ana_viva = False
        
        # Doa√ß√µes (primeiros 15 anos)
        if ano < PERIODO_DOACOES:
            saidas_anuais += DOACOES * 12
            
        # Renda dos filhos
        if idade_ana >= idade_inicio_filhos and idade_ana > expectativa:
            saidas_anuais += RENDA_FILHOS * 12

        # COMPRA DA FAZENDA (novo)
        compra_fazenda = False
        valor_gasto_fazenda = 0
        if periodo_compra_fazenda and ano + 1 == periodo_compra_fazenda:
            compra_fazenda = True
            valor_gasto_fazenda = valor_fazenda_futuro
            saidas_anuais += valor_gasto_fazenda

        # LIQUIDEZ NECESS√ÅRIA
        liquidez_info = {}
        if periodo_compra_fazenda and ano + 1 <= periodo_compra_fazenda:
            liquidez_info = calcular_liquidez_necessaria_ano(ano + 1, periodo_compra_fazenda, valor_fazenda_futuro)
        else:
            liquidez_info = {'liquidez_pct': 2, 'valor_fazenda_necessario': 0, 'fase': 'normal'}
        
        # SALDO L√çQUIDO
        saldo_liquido = rendimentos - saidas_anuais
        patrimonio_atual += saldo_liquido
        patrimonio_atual = max(patrimonio_atual, 0)
        
        fluxo.append({
            'ano': ano_calendario,
            'idade_ana': idade_ana,
            'patrimonio': patrimonio_atual,
            'rendimentos': rendimentos,
            'saidas': saidas_anuais,
            'saldo_liquido': saldo_liquido,
            'ana_viva': ana_viva,
            'renda_filhos_ativa': idade_ana >= idade_inicio_filhos and idade_ana > expectativa,
            'doacoes_ativas': ano < PERIODO_DOACOES,
            
            # NOVOS CAMPOS PARA FAZENDA
            'compra_fazenda': compra_fazenda,
            'valor_gasto_fazenda': valor_gasto_fazenda,
            'liquidez_necessaria_pct': liquidez_info['liquidez_pct'],
            'liquidez_fase': liquidez_info['fase'],
            'liquidez_descricao': liquidez_info.get('descricao', ''),
            
            # DESPESAS DETALHADAS
            'despesas_ana': despesas * 12 if ana_viva else 0,
            'doacoes': DOACOES * 12 if ano < PERIODO_DOACOES else 0,
            'renda_filhos': RENDA_FILHOS * 12 if idade_ana >= idade_inicio_filhos and idade_ana > expectativa else 0
        })
    
    return fluxo

def calcular_patrimonio_disponivel_periodo(periodo_compra, valor_fazenda_atual, taxa, expectativa, despesas, inicio_renda_filhos, perfil_investimento):
    """
    Calcula quanto patrim√¥nio estar√° dispon√≠vel no per√≠odo especificado para compra da fazenda
    
    Args:
        periodo_compra (int): Anos at√© a compra
        valor_fazenda_atual (float): Valor atual da fazenda
        demais par√¢metros: Par√¢metros do plano patrimonial
    
    Returns:
        dict: An√°lise de viabilidade da compra
    """
    if periodo_compra <= 0:
        return {'disponivel': 0, 'necessario': valor_fazenda_atual, 'viavel': False}
    
    # Valor futuro da fazenda
    valor_fazenda_futuro = calcular_valor_futuro_fazenda(valor_fazenda_atual, periodo_compra)
    
    # Gerar proje√ß√£o completa
    projecao = gerar_projecao_fluxo_com_fazenda(taxa, expectativa, despesas, 
                                               periodo_compra + 5, inicio_renda_filhos, 
                                               periodo_compra, valor_fazenda_futuro)
    
    # Patrim√¥nio no ano da compra
    if len(projecao) >= periodo_compra:
        item_ano_compra = projecao[periodo_compra - 1]
        patrimonio_disponivel = item_ano_compra['patrimonio']
        
        # Liquidez necess√°ria no ano
        liquidez_info = calcular_liquidez_necessaria_ano(periodo_compra, periodo_compra, valor_fazenda_futuro)
        liquidez_minima_pos_compra = patrimonio_disponivel * (liquidez_info['liquidez_pct'] / 100)
        
        # Valor realmente dispon√≠vel = patrim√¥nio - liquidez m√≠nima p√≥s-compra
        valor_disponivel_fazenda = patrimonio_disponivel - liquidez_minima_pos_compra
    else:
        patrimonio_disponivel = 0
        valor_disponivel_fazenda = 0
    
    viabilidade = {
        'disponivel': valor_disponivel_fazenda,
        'necessario': valor_fazenda_futuro,
        'viavel': valor_disponivel_fazenda >= valor_fazenda_futuro,
        'patrimonio_total_periodo': patrimonio_disponivel,
        'liquidez_minima_pos_compra': liquidez_minima_pos_compra if 'liquidez_minima_pos_compra' in locals() else 0,
        'periodo_compra': periodo_compra,
        'valor_atual': valor_fazenda_atual,
        'valor_futuro': valor_fazenda_futuro
    }
    
    print(f"üéØ Viabilidade compra em {periodo_compra} anos:")
    print(f"   Dispon√≠vel: R$ {valor_disponivel_fazenda:,.0f}")
    print(f"   Necess√°rio: R$ {valor_fazenda_futuro:,.0f}")
    print(f"   Status: {'‚úÖ VI√ÅVEL' if viabilidade['viavel'] else '‚ùå INVI√ÅVEL'}")
    
    return viabilidade
# ================ VALIDA√á√ïES DE SANIDADE ================
def validar_inputs(taxa, expectativa, despesas, inicio_renda_filhos=None):
    """
    Valida todos os inputs do usu√°rio para garantir consist√™ncia
    
    Args:
        taxa (float): Taxa de retorno real anual (%)
        expectativa (int): Expectativa de vida de Ana (anos)
        despesas (float): Despesas mensais de Ana (R$)
        inicio_renda_filhos (str/int): Quando inicia renda dos filhos
    
    Raises:
        ValueError: Se algum par√¢metro estiver fora dos limites esperados
    """
    
    # Valida√ß√£o da expectativa de vida
    assert expectativa >= IDADE_ANA, f"Expectativa de vida ({expectativa}) n√£o pode ser menor que idade atual de Ana ({IDADE_ANA})"
    assert expectativa <= 120, f"Expectativa de vida ({expectativa}) parece irrealisticamente alta (m√°ximo 120 anos)"
    
    # Valida√ß√£o da taxa de retorno real
    assert 0 < taxa <= 15, f"Taxa de retorno real ({taxa}%) fora de intervalo razo√°vel (0.1% a 15%)"
    if taxa > 8:
        print(f"‚ö†Ô∏è  ATEN√á√ÉO: Taxa de retorno real de {taxa}% √© muito otimista para perfil conservador-moderado")
    
    # Valida√ß√£o das despesas mensais
    assert 50_000 <= despesas <= 1_000_000, f"Despesas mensais ({despesas:,.0f}) fora de intervalo razo√°vel (R$ 50k a R$ 1M)"
    
    # Valida√ß√£o do in√≠cio da renda dos filhos
    if inicio_renda_filhos and isinstance(inicio_renda_filhos, int):
        assert IDADE_ANA <= inicio_renda_filhos <= expectativa, f"In√≠cio renda filhos ({inicio_renda_filhos}) deve estar entre idade atual ({IDADE_ANA}) e expectativa ({expectativa})"
    
    print(f"‚úÖ Valida√ß√µes OK - Taxa: {taxa}%, Expectativa: {expectativa} anos, Despesas: R$ {despesas:,.0f}/m√™s")

# ================ F√ìRMULAS FINANCEIRAS DOCUMENTADAS ================
def valor_presente(fluxo_mensal, anos, taxa_anual):
    """
    Calcula o valor presente de uma s√©rie de fluxos mensais futuros
    
    Esta √© uma das f√≥rmulas centrais do planejamento patrimonial.
    
    F√ìRMULA MATEM√ÅTICA:
    
    VP = PMT √ó [(1 - (1 + i)^(-n)) / i]
    
    Onde:
    - VP = Valor Presente
    - PMT = Pagamento mensal (fluxo_mensal)
    - i = Taxa de juros mensal
    - n = N√∫mero de per√≠odos (meses)
    
    CONVERS√ÉO DE TAXA ANUAL PARA MENSAL:
    taxa_mensal = (1 + taxa_anual)^(1/12) - 1
    
    Esta convers√£o garante que a capitaliza√ß√£o seja feita corretamente,
    considerando o efeito dos juros compostos.
    
    Args:
        fluxo_mensal (float): Valor mensal do fluxo (R$)
        anos (int): Dura√ß√£o do fluxo em anos
        taxa_anual (float): Taxa de retorno real anual (% ao ano)
    
    Returns:
        float: Valor presente dos fluxos (R$)
    
    Example:
        >>> valor_presente(150_000, 30, 4.0)  # R$ 150k/m√™s por 30 anos a 4% a.a.
        32_765_388.45
    """
    
    # Caso especial: taxa zero (sem juros)
    if taxa_anual <= 0:
        return fluxo_mensal * anos * 12
    
    # Convers√£o de taxa anual para mensal (capitaliza√ß√£o composta)
    # F√≥rmula: (1 + taxa_anual/100)^(1/12) - 1
    taxa_mensal = (1 + taxa_anual/100) ** (1/12) - 1
    
    # N√∫mero total de per√≠odos mensais
    periodos = anos * 12
    
    # Aplica√ß√£o da f√≥rmula de valor presente de anuidade
    if taxa_mensal > 0:
        # F√≥rmula padr√£o: PMT * [(1 - (1+i)^(-n)) / i]
        vp = fluxo_mensal * (1 - (1 + taxa_mensal) ** (-periodos)) / taxa_mensal
    else:
        # Caso degenerado: sem juros
        vp = fluxo_mensal * periodos
    
    return vp

def obter_patrimonio_disponivel(perfil_investimento='moderado'):
    """
    CORRE√á√ÉO CR√çTICA: Ana j√° possui R$ 65M L√çQUIDOS conforme case
    N√£o aplicar desconto adicional de liquidez
    """
    patrimonio_integral = PATRIMONIO
    
    # INFO: Perfil afeta apenas estrat√©gia de investimento, n√£o valor dispon√≠vel
    perfil_info = ASSET_ALLOCATION_PROFILES.get(perfil_investimento, ASSET_ALLOCATION_PROFILES['moderado'])
    
    print(f"üí∞ Patrim√¥nio integral dispon√≠vel: {format_currency(patrimonio_integral)} (perfil: {perfil_investimento})")
    print(f"üìä Retorno esperado: {perfil_info['retorno_esperado']}% a.a. real")
    
    return patrimonio_integral


def calcular_renda_vitalicia_corrigida(inicio_renda_filhos, expectativa_ana):
    """
    CORRE√á√ÉO CR√çTICA: Renda verdadeiramente VITAL√çCIA
    
    Premissas corrigidas:
    - Filhos vivem at√© 85 anos (conservador)
    - Renda dura desde in√≠cio at√© morte dos filhos
    - Sem limita√ß√£o artificial de 55 anos
    """
    
    if inicio_renda_filhos == 'falecimento':
        anos_ate_inicio = expectativa_ana - IDADE_ANA
        idade_filhos_ao_inicio = IDADE_ESTIMADA_FILHOS + anos_ate_inicio
        anos_duracao = max(0, EXPECTATIVA_FILHOS - idade_filhos_ao_inicio)
        
    elif inicio_renda_filhos == 'imediato':
        anos_ate_inicio = 0
        anos_duracao = EXPECTATIVA_FILHOS - IDADE_ESTIMADA_FILHOS  # ~55 anos
        
    elif isinstance(inicio_renda_filhos, int):
        idade_inicio = int(inicio_renda_filhos)
        anos_ate_inicio = max(0, idade_inicio - IDADE_ANA)
        
        # Idade dos filhos quando a renda inicia
        idade_filhos_ao_inicio = IDADE_ESTIMADA_FILHOS + anos_ate_inicio
        anos_duracao = max(0, EXPECTATIVA_FILHOS - idade_filhos_ao_inicio)
    else:
        # Default: aos 65 anos de Ana (otimizado)
        anos_ate_inicio = max(0, 65 - IDADE_ANA)
        idade_filhos_ao_inicio = IDADE_ESTIMADA_FILHOS + anos_ate_inicio
        anos_duracao = max(0, EXPECTATIVA_FILHOS - idade_filhos_ao_inicio)
    
    print(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Renda vital√≠cia CORRIGIDA: {anos_duracao} anos (in√≠cio em {anos_ate_inicio} anos)")
    print(f"   üìÖ Filhos ter√£o {IDADE_ESTIMADA_FILHOS + anos_ate_inicio} anos quando renda inicia")
    print(f"   üèÅ Renda at√© os {EXPECTATIVA_FILHOS} anos dos filhos")
    
    return anos_ate_inicio, anos_duracao

# ================ CORRE√á√ÉO #4: TIMING OTIMIZADO DOS COMPROMISSOS ================
def otimizar_timing_compromissos(taxa, expectativa, inicio_renda_filhos='imediato'):
    """
    CORRE√á√ÉO: Otimizar QUANDO iniciar cada compromisso para minimizar VP
    
    Estrat√©gia:
    - Renda filhos: come√ßar MAIS TARDE reduz VP significativamente
    - Doa√ß√µes: podem come√ßar imediatamente (s√£o apenas 15 anos)
    - Despesas Ana: obrigatoriamente imediatas
    """
    
    timing_otimizado = {}
    
    # Avaliar diferentes idades para in√≠cio da renda dos filhos
    opcoes_inicio = [53, 60, 65, 70, 'falecimento']  # Ana tem 53 hoje
    menor_vp = float('inf')
    melhor_opcao = inicio_renda_filhos
    
    for opcao in opcoes_inicio:
        if opcao == 'falecimento':
            idade_inicio = expectativa
        else:
            idade_inicio = opcao
            
        # Pular se j√° passou da idade
        if isinstance(idade_inicio, int) and idade_inicio < IDADE_ANA:
            continue
            
        anos_ate_inicio, anos_duracao = calcular_renda_vitalicia_corrigida(opcao, expectativa)
        
        if anos_duracao <= 0:
            continue
            
        # Calcular VP para esta op√ß√£o
        if anos_ate_inicio > 0:
            fator_desconto = (1 + taxa/100) ** (-anos_ate_inicio)
            vp_opcao = valor_presente(RENDA_FILHOS, anos_duracao, taxa) * fator_desconto
        else:
            vp_opcao = valor_presente(RENDA_FILHOS, anos_duracao, taxa)
        
        timing_otimizado[f'inicio_{opcao}'] = {
            'vp': vp_opcao,
            'anos_ate_inicio': anos_ate_inicio,
            'anos_duracao': anos_duracao
        }
        
        # Verificar se √© a melhor op√ß√£o
        if vp_opcao < menor_vp:
            menor_vp = vp_opcao
            melhor_opcao = opcao
    
    # Use a op√ß√£o escolhida pelo usu√°rio ou a melhor se n√£o especificada
    if inicio_renda_filhos not in opcoes_inicio:
        if inicio_renda_filhos == 'otimizado':
            inicio_renda_filhos = melhor_opcao
            print(f"üéØ OTIMIZA√á√ÉO: Melhor timing para renda filhos = {melhor_opcao}")
    
    return timing_otimizado, inicio_renda_filhos

def estimar_itcmd_futuro(patrimonio_estimado_heranca, estado='MG'):
    """
    CORRE√á√ÉO: ITCMD √© informativo, N√ÉO reduz patrim√¥nio atual
    Ser√° pago no momento da heran√ßa, n√£o hoje
    """
    aliquotas_itcmd = {
        'MG': 0.05,  # 5% em Minas Gerais
        'SP': 0.04,  # 4% em S√£o Paulo  
        'RJ': 0.04,  # 4% no Rio de Janeiro
        'default': 0.06  # 6% conservador
    }
    
    aliquota = aliquotas_itcmd.get(estado, aliquotas_itcmd['default'])
    imposto_estimado = patrimonio_estimado_heranca * aliquota
    
    print(f"üìã ITCMD estimado futuro ({estado}): {aliquota*100}% = {format_currency(imposto_estimado)}")
    print(f"   ‚ö†Ô∏è  IMPORTANTE: N√£o reduz patrim√¥nio atual, ser√° pago na heran√ßa")
    
    return {
        'valor_estimado': imposto_estimado,
        'aliquota_aplicada': aliquota,
        'estado': estado,
        'observacao': 'Pago no momento da heran√ßa, n√£o reduz patrim√¥nio atual'
    }
    

def avaliar_sustentabilidade_fazenda(custo_fazenda, patrimonio_disponivel, sobra_apos_compromissos):
    """
    CORRE√á√ÉO: Avaliar sustentabilidade da fazenda sem limites arbitr√°rios
    Base na SOBRA real ap√≥s compromissos essenciais
    """
    
    percentual_patrimonio = (custo_fazenda / patrimonio_disponivel) * 100
    percentual_sobra = (custo_fazenda / sobra_apos_compromissos) * 100 if sobra_apos_compromissos > 0 else float('inf')
    
    # An√°lise qualitativa sem limites r√≠gidos
    if sobra_apos_compromissos <= 0:
        status = 'inviavel'
        recomendacao = 'Imposs√≠vel com compromissos atuais'
    elif custo_fazenda > sobra_apos_compromissos:
        status = 'parcial'
        custo_maximo = sobra_apos_compromissos
        recomendacao = f'M√°ximo vi√°vel: {format_currency(custo_maximo)}'
    elif percentual_patrimonio > 50:
        status = 'atencao'
        recomendacao = f'Alto percentual do patrim√¥nio ({percentual_patrimonio:.1f}%) - avaliar riscos'
    else:
        status = 'viavel'
        recomendacao = f'Sustent√°vel ({percentual_patrimonio:.1f}% do patrim√¥nio)'
    
    return {
        'status': status,
        'percentual_patrimonio': percentual_patrimonio,
        'percentual_sobra': percentual_sobra,
        'recomendacao': recomendacao,
        'custo_maximo_teorico': sobra_apos_compromissos,
        'custo_maximo_disponivel': custo_maximo if 'custo_maximo' in locals() else sobra_apos_compromissos  # ‚úÖ ADICIONADO
    }


def aplicar_tributacao_sucessoria(patrimonio_heranca, estado='MG'):
    """Aplica ITCMD conforme legisla√ß√£o estadual"""
    aliquotas_itcmd = {
        'MG': 0.05,  # 5% em Minas Gerais
        'SP': 0.04,  # 4% em S√£o Paulo  
        'RJ': 0.04,  # 4% no Rio de Janeiro
        'default': 0.06  # 6% conservador
    }
    
    aliquota = aliquotas_itcmd.get(estado, aliquotas_itcmd['default'])
    imposto = patrimonio_heranca * aliquota
    valor_liquido = patrimonio_heranca - imposto
    
    print(f"üèõÔ∏è ITCMD {estado}: {aliquota*100}% = {format_currency(imposto)}")
    
    return {
        'valor_bruto': patrimonio_heranca,
        'imposto_itcmd': imposto,
        'valor_liquido': valor_liquido,
        'aliquota_aplicada': aliquota,
        'estado': estado
    }

def validar_custo_fazenda(custo_fazenda, patrimonio_liquido, percentual_limite=15):
    """Valida sustentabilidade do investimento em fazenda"""
    percentual_fazenda = (custo_fazenda / patrimonio_liquido) * 100
    
    if percentual_fazenda > percentual_limite:
        custo_maximo = patrimonio_liquido * (percentual_limite/100)
        return {
            'valido': False,
            'percentual_atual': percentual_fazenda,
            'percentual_limite': percentual_limite,
            'custo_maximo_recomendado': custo_maximo,
            'erro': f'Custo fazenda ({percentual_fazenda:.1f}%) > limite ({percentual_limite}%). M√°ximo recomendado: {format_currency(custo_maximo)}'
        }
    
    return {
        'valido': True,
        'percentual_atual': percentual_fazenda,
        'margem_seguranca': percentual_limite - percentual_fazenda
    }

def validar_capacidade_dual(patrimonio, rendimento_anual, despesas_ana, renda_filhos, anos_sobreposicao):
    """Valida capacidade para despesas simult√¢neas de Ana + filhos"""
    saida_mensal_total = despesas_ana + renda_filhos
    saida_anual_total = saida_mensal_total * 12
    
    if rendimento_anual < saida_anual_total:
        deficit_anual = saida_anual_total - rendimento_anual
        anos_sustentaveis = patrimonio / deficit_anual
        
        if anos_sustentaveis < anos_sobreposicao:
            return {
                'viavel': False,
                'anos_sustentaveis': anos_sustentaveis,
                'anos_necessarios': anos_sobreposicao,
                'deficit_anual': deficit_anual,
                'saida_total_mensal': saida_mensal_total,
                'recomendacao': f'Postergar renda filhos ou reduzir despesas em {format_currency(deficit_anual/12)}/m√™s'
            }
    
    return {
        'viavel': True,
        'margem_seguranca': rendimento_anual - saida_anual_total
    }
def calcular_compromissos_v42_corrigido(taxa, expectativa, despesas, inicio_renda_filhos, custo_fazenda=2_000_000, perfil_investimento='moderado'):
    """
    VERS√ÉO 4.2 - TODOS OS ERROS CORRIGIDOS:
    ‚úÖ #1: Patrim√¥nio integral (R$ 65M, n√£o R$ 45.5M)
    ‚úÖ #2: ITCMD removido dos c√°lculos atuais  
    ‚úÖ #3: Renda vital√≠cia real dos filhos
    ‚úÖ #4: Timing otimizado dos compromissos
    ‚úÖ #5: Sem restri√ß√µes arbitr√°rias na fazenda
    ‚úÖ #6: Infla√ß√£o j√° descontada na taxa real
    ‚úÖ #7: Otimiza√ß√£o temporal implementada
    """
    
    # 1. VALIDAR INPUTS (mantido - estava correto)
    validar_inputs(taxa, expectativa, despesas, inicio_renda_filhos)
    
    # 2. CORRE√á√ÉO #1: USAR PATRIM√îNIO INTEGRAL  
    patrimonio_disponivel = obter_patrimonio_disponivel(perfil_investimento)
    
    # 3. CORRE√á√ÉO #4: OTIMIZAR TIMING DOS COMPROMISSOS
    timing_analysis, inicio_otimizado = otimizar_timing_compromissos(taxa, expectativa, inicio_renda_filhos)
    
    # 4. CALCULAR ANOS DE VIDA DE ANA (mantido)
    anos_vida_ana = expectativa - IDADE_ANA
    
    # 5. VP DESPESAS DE ANA (mantido - obrigatoriamente imediatas)
    vp_despesas = valor_presente(despesas, anos_vida_ana, taxa)
    
    # 6. CORRE√á√ÉO #3: VP RENDA VITAL√çCIA CORRIGIDA DOS FILHOS
    anos_ate_inicio, anos_duracao = calcular_renda_vitalicia_corrigida(inicio_otimizado, expectativa)
    
    if anos_duracao > 0:
        if anos_ate_inicio > 0:
            fator_desconto = (1 + taxa/100) ** (-anos_ate_inicio)
            vp_filhos = valor_presente(RENDA_FILHOS, anos_duracao, taxa) * fator_desconto
        else:
            vp_filhos = valor_presente(RENDA_FILHOS, anos_duracao, taxa)
    else:
        vp_filhos = 0
        print("‚ö†Ô∏è  AVISO: Dura√ß√£o da renda dos filhos = 0 anos")
    
    # 7. VP DOA√á√ïES (mantido - 15 anos exatos)
    vp_doacoes = valor_presente(DOACOES, PERIODO_DOACOES, taxa)
    
    # 8. CORRE√á√ÉO #2: ITCMD APENAS INFORMATIVO
    patrimonio_estimado_heranca = patrimonio_disponivel  # Estimativa simples
    itcmd_info = estimar_itcmd_futuro(patrimonio_estimado_heranca)
    
    # 9. TOTAL DE COMPROMISSOS (SEM ITCMD)
    total_compromissos = vp_despesas + vp_filhos + vp_doacoes
    # CORRE√á√ÉO: ITCMD n√£o entra no c√°lculo atual
    
    # 10. VALOR DISPON√çVEL PARA FAZENDA
    valor_disponivel_fazenda = patrimonio_disponivel - total_compromissos
    percentual_fazenda = (valor_disponivel_fazenda / PATRIMONIO) * 100
    
    # 11. CORRE√á√ÉO #5: AVALIAR FAZENDA SEM LIMITES ARBITR√ÅRIOS
    avaliacao_fazenda = avaliar_sustentabilidade_fazenda(custo_fazenda, patrimonio_disponivel, valor_disponivel_fazenda)
    
    # 12. VALOR PARA ARTE/GALERIA
    valor_arte = max(0, valor_disponivel_fazenda - custo_fazenda) if valor_disponivel_fazenda > 0 else 0
    percentual_arte = (valor_arte / PATRIMONIO) * 100 if valor_arte > 0 else 0
    
    # 13. LOGS INFORMATIVOS
    print(f"\nüí∞ COMPROMISSOS CORRIGIDOS v4.2:")
    print(f"   ‚Ä¢ VP Despesas Ana ({anos_vida_ana} anos): {format_currency(vp_despesas)}")
    print(f"   ‚Ä¢ VP Renda Vital√≠cia Filhos ({anos_duracao} anos): {format_currency(vp_filhos)}")
    print(f"   ‚Ä¢ VP Doa√ß√µes (15 anos): {format_currency(vp_doacoes)}")
    print(f"   ‚Ä¢ Total Compromissos: {format_currency(total_compromissos)}")
    print(f"\nüè° AN√ÅLISE FAZENDA:")
    print(f"   ‚Ä¢ Dispon√≠vel para fazenda: {format_currency(valor_disponivel_fazenda)} ({percentual_fazenda:.1f}%)")
    print(f"   ‚Ä¢ Status: {avaliacao_fazenda['status']} - {avaliacao_fazenda['recomendacao']}")
    print(f"üé® Valor arte/galeria: {format_currency(valor_arte)} ({percentual_arte:.1f}%)")
    
    return {
        'patrimonio_total': PATRIMONIO,
        'patrimonio_disponivel': patrimonio_disponivel,
        'despesas': vp_despesas,
        'filhos': vp_filhos,
        'doacoes': vp_doacoes,
        'total_compromissos': total_compromissos,
        'fazenda_disponivel': valor_disponivel_fazenda,
        'percentual_fazenda': percentual_fazenda,
        'arte': valor_arte,
        'percentual_arte': percentual_arte,
        'custo_fazenda': custo_fazenda,
        'itcmd_informativo': itcmd_info,
        'avaliacao_fazenda': avaliacao_fazenda,
        'timing_analysis': timing_analysis,
        'anos_vida_ana': anos_vida_ana,
        'anos_renda_filhos': anos_duracao,
        'inicio_renda_filhos': inicio_otimizado,
        'perfil_investimento': perfil_investimento,
        'corrected_version': '4.2-ALL-ERRORS-FIXED'
    }


def stress_test_longevidade(taxa, despesas, inicio_renda_filhos):
    """Executa stress test para diferentes expectativas de vida"""
    cenarios = {}
    
    for expectativa in [90, 95, 100, 105]:
        try:
            resultado = calcular_compromissos_v42_corrigido(taxa, expectativa, despesas, inicio_renda_filhos)
            cenarios[f'expectativa_{expectativa}'] = {
                'fazenda': resultado['fazenda'],
                'status': determinar_status(resultado['fazenda'], resultado['percentual']),
                'percentual': resultado['percentual']
            }
        except Exception as e:
            cenarios[f'expectativa_{expectativa}'] = {
                'fazenda': 0,
                'status': 'erro',
                'erro': str(e)
            }
    
    # Identificar primeiro cen√°rio cr√≠tico
    primeiro_critico = None
    for exp in [90, 95, 100, 105]:
        key = f'expectativa_{exp}'
        if cenarios[key]['status'] in ['cr√≠tico', 'erro']:
            primeiro_critico = exp
            break
    
    robustez = primeiro_critico is None or primeiro_critico >= 100
    
    return {
        'cenarios': cenarios,
        'primeiro_cenario_critico': primeiro_critico,
        'robustez': robustez,
        'recomendacao': 'Plano robusto' if robustez else f'Plano falha aos {primeiro_critico} anos'
    }


# ================ MODIFICA√á√ÉO DA FUN√á√ÉO PRINCIPAL ================
def calcular_compromissos_v43_com_fazenda(taxa, expectativa, despesas, inicio_renda_filhos, 
                                         custo_fazenda, perfil_investimento,
                                         periodo_compra_fazenda=None):
    """
    VERS√ÉO 4.3 - INCLUI COMPRA DA FAZENDA COM LIQUIDEZ GRADUAL
    
    Novos par√¢metros:
        periodo_compra_fazenda (int): Anos at√© compra da fazenda (None = n√£o comprar)
    """
    
    # Validar inputs existentes
    validar_inputs(taxa, expectativa, despesas, inicio_renda_filhos)
    
    # Patrim√¥nio dispon√≠vel
    patrimonio_disponivel = obter_patrimonio_disponivel(perfil_investimento)
    
    # Calcular compromissos b√°sicos (sem fazenda)
    resultado_base = calcular_compromissos_v42_corrigido(taxa, expectativa, despesas, 
                                                        inicio_renda_filhos, 0, perfil_investimento)
    
    # AN√ÅLISE DA FAZENDA
    fazenda_analysis = {}
    
    if periodo_compra_fazenda and periodo_compra_fazenda > 0:
        # Valor futuro da fazenda
        valor_fazenda_futuro = calcular_valor_futuro_fazenda(custo_fazenda, periodo_compra_fazenda)
        
        # Disponibilidade no per√≠odo
        viabilidade = calcular_patrimonio_disponivel_periodo(
            periodo_compra_fazenda, custo_fazenda, taxa, expectativa, 
            despesas, inicio_renda_filhos, perfil_investimento
        )
        
        # Fases de liquidez
        fases_liquidez = calcular_liquidez_por_fase(periodo_compra_fazenda)
        
        fazenda_analysis = {
            'periodo_compra': periodo_compra_fazenda,
            'valor_atual': custo_fazenda,
            'valor_futuro': valor_fazenda_futuro,
            'viabilidade': viabilidade,
            'fases_liquidez': fases_liquidez,
            'disponivel_periodo': viabilidade['disponivel'],
            'necessario_periodo': viabilidade['necessario'],
            'viavel': viabilidade['viavel']
        }
        
        # Atualizar resultado para mostrar no card
        if viabilidade['viavel']:
            fazenda_disponivel = viabilidade['disponivel']
            percentual_fazenda = (fazenda_disponivel / PATRIMONIO) * 100
        else:
            fazenda_disponivel = viabilidade['disponivel']  # Mostrar o que est√° dispon√≠vel
            percentual_fazenda = (fazenda_disponivel / PATRIMONIO) * 100
            
    else:
        # Sem compra de fazenda - usar c√°lculo original
        fazenda_disponivel = resultado_base['fazenda_disponivel']
        percentual_fazenda = resultado_base['percentual_fazenda']
        fazenda_analysis = {
            'periodo_compra': None,
            'valor_atual': custo_fazenda,
            'valor_futuro': custo_fazenda,
            'viavel': fazenda_disponivel >= custo_fazenda,
            'disponivel_periodo': fazenda_disponivel,
            'necessario_periodo': custo_fazenda
        }
    
    # Arte/galeria = sobra ap√≥s fazenda
    valor_arte = max(0, fazenda_disponivel - fazenda_analysis['necessario_periodo']) if fazenda_analysis['viavel'] else 0
    percentual_arte = (valor_arte / PATRIMONIO) * 100 if valor_arte > 0 else 0
    
    print(f"\nüè° AN√ÅLISE FAZENDA v4.3:")
    print(f"   ‚Ä¢ Per√≠odo: {periodo_compra_fazenda or 'Imediato'} anos")
    print(f"   ‚Ä¢ Valor hoje: {format_currency(custo_fazenda)}")
    if periodo_compra_fazenda:
        print(f"   ‚Ä¢ Valor futuro: {format_currency(fazenda_analysis['valor_futuro'])}")
    print(f"   ‚Ä¢ Dispon√≠vel: {format_currency(fazenda_disponivel)} ({percentual_fazenda:.1f}%)")
    print(f"   ‚Ä¢ Status: {'‚úÖ VI√ÅVEL' if fazenda_analysis['viavel'] else '‚ùå INVI√ÅVEL'}")
    
    return {
        **resultado_base,  # Manter todos os campos existentes
        
        # SOBRESCREVER CAMPOS DA FAZENDA
        'fazenda_disponivel': fazenda_disponivel,
        'percentual_fazenda': percentual_fazenda,
        'arte': valor_arte,
        'percentual_arte': percentual_arte,
        
        # NOVOS CAMPOS PARA FAZENDA
        'fazenda_analysis': fazenda_analysis,
        'periodo_compra_fazenda': periodo_compra_fazenda,
        'valor_fazenda_atual': custo_fazenda,
        'valor_fazenda_futuro': fazenda_analysis.get('valor_futuro', custo_fazenda),
        
        'corrected_version': '4.3-FAZENDA-LIQUIDEZ-GRADUAL'
    }

def determinar_status(fazenda, percentual, thresholds=None):
    """
    Determina o status de sustentabilidade do plano patrimonial
    
    L√ìGICA DE CLASSIFICA√á√ÉO (parametriz√°vel):
    - CR√çTICO: Valor fazenda negativo OU < 2% do patrim√¥nio
    - ATEN√á√ÉO: Valor fazenda entre 2% e 8% do patrim√¥nio  
    - VI√ÅVEL: Valor fazenda >= 8% do patrim√¥nio
    
    Args:
        fazenda (float): Valor dispon√≠vel para fazenda (R$)
        percentual (float): Percentual do patrim√¥nio (%)
        thresholds (dict): Limites personalizados (opcional)
    
    Returns:
        str: 'cr√≠tico', 'aten√ß√£o' ou 'vi√°vel'
    """
    
    
    if thresholds is None:
        thresholds = STATUS_THRESHOLDS
    
    if fazenda < thresholds['critico_absoluto']:
        return 'cr√≠tico'
    elif percentual < thresholds['critico_percentual']:
        return 'cr√≠tico'
    elif percentual < thresholds['atencao_percentual']:
        return 'aten√ß√£o'
    else:
        return 'vi√°vel'

def gerar_projecao_fluxo(taxa, expectativa, despesas, anos=20, inicio_renda_filhos='falecimento'):
    """
    Gera proje√ß√£o detalhada do fluxo de caixa patrimonial
    
    PREMISSAS DA PROJE√á√ÉO:
    - Patrim√¥nio inicial rende √† taxa real especificada
    - Despesas de Ana cessam quando excede expectativa de vida
    - Renda dos filhos inicia conforme par√¢metro
    - Doa√ß√µes cessam ap√≥s exatamente 15 anos
    - Valores ajustados pela infla√ß√£o (taxa j√° √© real)
    - SINALIZA√á√ÉO EXPL√çCITA quando Ana atinge expectativa de vida
    
    Args:
        taxa (float): Taxa de retorno real anual (%) - j√° descontada da infla√ß√£o de ~3.5% a.a.
        expectativa (int): Expectativa de vida de Ana (anos)
        despesas (float): Despesas mensais de Ana (R$)
        anos (int): Horizonte da proje√ß√£o (anos)
        inicio_renda_filhos (str/int): Timing da renda dos filhos
    
    Returns:
        list: Lista de dicion√°rios com proje√ß√£o anual
    """
    
    patrimonio_atual = PATRIMONIO
    fluxo = []
    ano_falecimento = None  # Para marcar no fluxo
    
    # Determinar quando inicia renda dos filhos
    if inicio_renda_filhos == 'falecimento':
        idade_inicio_filhos = expectativa
    elif inicio_renda_filhos == 'imediato':
        idade_inicio_filhos = IDADE_ANA
    elif isinstance(inicio_renda_filhos, int):
        idade_inicio_filhos = int(inicio_renda_filhos)
    else:
        idade_inicio_filhos = 65  # Default
    
    for ano in range(anos):
        idade_ana = IDADE_ANA + ano + 1
        ano_calendario = 2025 + ano
        
        # RENDIMENTOS: Patrim√¥nio √ó taxa real
        rendimentos = patrimonio_atual * (taxa / 100)
        
        # SA√çDAS ANUAIS
        saidas_anuais = 0
        
        # Despesas de Ana (apenas se ela estiver viva)
        if idade_ana <= expectativa:
            saidas_anuais += despesas * 12
            ana_viva = True
        else:
            ana_viva = False
            # MARCAR ANO DO FALECIMENTO (primeira vez que excede expectativa)
            if ano_falecimento is None and idade_ana == expectativa + 1:
                ano_falecimento = ano_calendario - 1  # Ano anterior foi √∫ltimo ano de vida
        
        
        # Doa√ß√µes (apenas nos primeiros 15 anos)
        if ano < PERIODO_DOACOES:
            saidas_anuais += DOACOES * 12
            
        if idade_ana >= idade_inicio_filhos and idade_ana > expectativa:
            saidas_anuais += RENDA_FILHOS * 12

        
        # SALDO L√çQUIDO
        saldo_liquido = rendimentos - saidas_anuais
        patrimonio_atual += saldo_liquido
        
        # N√£o permitir patrim√¥nio negativo
        patrimonio_atual = max(patrimonio_atual, 0)
        
        # Determinar marco especial
        marco_especial = None
        if ano_falecimento and ano_calendario == ano_falecimento:
            marco_especial = f"üïäÔ∏è Falecimento de Ana (expectativa: {expectativa} anos)"
        elif idade_ana == idade_inicio_filhos:
            marco_especial = f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ In√≠cio da renda dos filhos"
        elif ano == PERIODO_DOACOES - 1:
            marco_especial = f"üéÅ √öltimo ano de doa√ß√µes (15 anos completos)"
        
        fluxo.append({
            'ano': ano_calendario,
            'idade_ana': idade_ana,
            'ana_viva': ana_viva,
            'patrimonio': patrimonio_atual,
            'rendimentos': rendimentos,
            'saidas': saidas_anuais,
            'saldo_liquido': saldo_liquido,
            'despesas_ana': despesas * 12 if ana_viva else 0,
            'renda_filhos': RENDA_FILHOS * 12 if idade_ana >= idade_inicio_filhos else 0,
            'doacoes': DOACOES * 12 if ano < PERIODO_DOACOES else 0,
            'marco_especial': marco_especial,
            'ano_pos_falecimento': (ano_calendario - ano_falecimento) if ano_falecimento and ano_calendario > ano_falecimento else None
        })
    
    return fluxo

# ================ FORMATA√á√ÉO MONET√ÅRIA DOCUMENTADA ================
def format_currency(value, compact=False):
    """
    Formata valores monet√°rios conforme padr√£o estabelecido
    
    REGRAS DE FORMATA√á√ÉO:
    - Valores >= R$ 1 milh√£o: "R$ X.XM" (compact) ou "R$ X.XXX.XXX" (full)
    - Valores >= R$ 1 mil: "R$ XXXk" (compact) ou "R$ XXX.XXX" (full)  
    - Valores < R$ 1 mil: "R$ XXX"
    - Valores negativos: precedidos por sinal negativo
    
    Args:
        value (float): Valor a ser formatado (R$)
        compact (bool): Se True, usa formato compacto (M/k)
    
    Returns:
        str: Valor formatado
    
    Examples:
        >>> format_currency(65_000_000, compact=True)
        'R$ 65.0M'
        >>> format_currency(65_000_000, compact=False)  
        'R$ 65.000.000'
        >>> format_currency(150_000, compact=True)
        'R$ 150k'
    """
    
    if value is None or (isinstance(value, str) and value.lower() in ['nan', 'inf', '-inf']):
        return 'N/A'
    
    # Converter para float se necess√°rio
    try:
        value = float(value)
    except (ValueError, TypeError):
        return 'N/A'
    
    # Formato compacto para dashboard
    if compact:
        if abs(value) >= 1_000_000:
            return f"R$ {value/1_000_000:.1f}M"
        elif abs(value) >= 1_000:
            return f"R$ {value/1_000:.0f}k"
        else:
            return f"R$ {value:,.0f}".replace(',', '.')
    
    # Formato completo para relat√≥rios
    else:
        return f"R$ {value:,.0f}".replace(',', '.')

# ================ ASSET ALLOCATION MANAGER ================
def get_asset_allocation(perfil='moderado', patrimonio=PATRIMONIO):
    """
    Retorna estrutura detalhada de asset allocation baseada no perfil
    
    Args:
        perfil (str): 'conservador', 'moderado' ou 'balanceado'
        patrimonio (float): Valor total do patrim√¥nio (R$)
    
    Returns:
        list: Lista de dicion√°rios com classes de ativos
    """
    
    if perfil not in ASSET_ALLOCATION_PROFILES:
        perfil = 'moderado'  # Default
    
    profile = ASSET_ALLOCATION_PROFILES[perfil]
    allocation = []
    
    # Classes de ativos padronizadas
    classes = {
        'renda_fixa_br': 'Renda Fixa Nacional',
        'renda_fixa_int': 'Renda Fixa Internacional', 
        'acoes_br': 'A√ß√µes Brasil',
        'acoes_int': 'A√ß√µes Internacionais',
        'imoveis': 'Fundos Imobili√°rios',
        'multimercado': 'Multimercado',
        'liquidez': 'Reserva de Liquidez'
    }
    
    for key, nome in classes.items():
        if key in profile and profile[key] > 0:
            percentual = profile[key]
            valor = patrimonio * (percentual / 100)
            
            allocation.append({
                'nome': nome,
                'percentual': percentual,
                'valor': valor,
                'classe': key
            })
    
    return allocation

# ================ TIMEZONE HELPERS ================
def get_current_datetime_sao_paulo():
    """
    Retorna datetime atual no timezone de S√£o Paulo (UTC-3)
    
    Returns:
        datetime: Objeto datetime com timezone
    """
    return datetime.now(SAO_PAULO_TZ)

def format_datetime_report(dt=None):
    """
    Formata datetime para uso em relat√≥rios
    
    Args:
        dt (datetime): Datetime para formatar (default: agora)
    
    Returns:
        str: Data/hora formatada
    """
    if dt is None:
        dt = get_current_datetime_sao_paulo()
    
    return dt.strftime('%d/%m/%Y √†s %H:%M (hor√°rio de Bras√≠lia)')

# ================ FUN√á√ïES DE GERA√á√ÉO DE PDF ================

def gerar_pdf_executivo(gerador):
    """Gera PDF do relat√≥rio executivo"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, 
                           topMargin=0.8*inch, bottomMargin=0.8*inch,
                           leftMargin=0.8*inch, rightMargin=0.8*inch)
    
    story = []
    styles = getSampleStyleSheet()
    
    # Criar estilos customizados
    styles.add(ParagraphStyle(name='CustomTitle', 
                             parent=styles['Heading1'],
                             fontSize=24, spaceAfter=30, textColor=colors.HexColor('#1e3a8a')))
    
    styles.add(ParagraphStyle(name='CustomHeading', 
                             parent=styles['Heading2'],
                             fontSize=16, spaceAfter=20, textColor=colors.HexColor('#1e3a8a')))
    
    styles.add(ParagraphStyle(name='StatusBox',
                             parent=styles['Normal'],
                             fontSize=14, alignment=TA_CENTER,
                             borderWidth=2, borderColor=colors.HexColor('#059669'),
                             backColor=colors.HexColor('#f0fdf4'),
                             leftIndent=20, rightIndent=20, topPadding=15, bottomPadding=15))
    
    # P√°gina 1: Sum√°rio Executivo
    story.extend(criar_pagina_sumario_executivo(gerador, styles))
    story.append(PageBreak())
    
    # P√°gina 2: Breakdown Financeiro
    story.extend(criar_pagina_breakdown_financeiro(gerador, styles))
    story.append(PageBreak())
    
    # P√°gina 3: Cen√°rios e Recomenda√ß√µes
    story.extend(criar_pagina_cenarios_recomendacoes(gerador, styles))
    
    doc.build(story)
    buffer.seek(0)
    return buffer

def criar_pagina_sumario_executivo(gerador, styles):
    """Cria primeira p√°gina do relat√≥rio executivo"""
    elementos = []
    dados_exec = gerador.gerar_dados_executivo()
    
    # Cabe√ßalho
    elementos.append(Paragraph("CIMO MULTI FAMILY OFFICE", styles['CustomTitle']))
    elementos.append(Paragraph("PLANO PATRIMONIAL - ANA", styles['Heading1']))
    elementos.append(Paragraph(f"Data: {gerador.timestamp.strftime('%d/%m/%Y √†s %H:%M')}", styles['Normal']))
    elementos.append(Spacer(1, 30))
    
    # Par√¢metros configurados
    params_data = [
        ['Par√¢metro', 'Valor Configurado'],
        ['Taxa de Retorno Real', f"{gerador.params['taxa']}% a.a."],
        ['Expectativa de Vida', f"{gerador.params['expectativa']} anos"],
        ['Despesas Mensais', format_currency(gerador.params['despesas'])],
        ['Perfil de Investimento', gerador.params['perfil'].title()],
        ['In√≠cio Renda Filhos', gerador.params['inicio_renda_filhos'].title()],
        ['Or√ßamento Fazenda', format_currency(gerador.params['custo_fazenda'])]
    ]
    
    params_table = Table(params_data, colWidths=[3*inch, 2*inch])
    params_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e3a8a')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#f8fafc')),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e2e8f0'))
    ]))
    
    elementos.append(params_table)
    elementos.append(Spacer(1, 30))
    
    # Resultado principal
    status_info = dados_exec['status_textual']
    resultado_text = f"""
    <b>STATUS DO PLANO: {status_info['status']}</b><br/>
    <br/>
    Valor Dispon√≠vel para Fazenda: <b>{format_currency(gerador.dados['fazenda_disponivel'], True)}</b><br/>
    Percentual do Patrim√¥nio: <b>{gerador.dados['percentual_fazenda']:.1f}%</b><br/>
    <br/>
    {status_info['descricao']}<br/>
    <br/>
    <i>A√ß√£o Requerida: {status_info['acao_requerida']}</i>
    """
    
    elementos.append(Paragraph(resultado_text, styles['StatusBox']))
    elementos.append(Spacer(1, 20))
    
    # Principais insights
    elementos.append(Paragraph("üí° PRINCIPAIS INSIGHTS:", styles['CustomHeading']))
    for insight in dados_exec['insights'][:3]:  # M√°ximo 3 insights na primeira p√°gina
        elementos.append(Paragraph(f"‚Ä¢ {insight}", styles['Normal']))
        elementos.append(Spacer(1, 8))
    
    return elementos

def criar_pagina_breakdown_financeiro(gerador, styles):
    """Cria segunda p√°gina com breakdown financeiro"""
    elementos = []
    dados_exec = gerador.gerar_dados_executivo()
    resumo = dados_exec['resumo_patrimonial']
    
    elementos.append(Paragraph("üí∞ ALOCA√á√ÉO DO PATRIM√îNIO", styles['CustomTitle']))
    elementos.append(Paragraph(f"Base: {format_currency(PATRIMONIO)}", styles['Normal']))
    elementos.append(Spacer(1, 20))
    
    # Tabela de compromissos essenciais
    elementos.append(Paragraph("üìä COMPROMISSOS ESSENCIAIS:", styles['CustomHeading']))
    
    compromissos_data = [
        ['Compromisso', 'Valor (VP)', '% Patrim√¥nio', 'Descri√ß√£o'],
        [
            'Despesas Ana',
            format_currency(resumo['compromissos']['despesas_ana']['valor'], True),
            f"{resumo['compromissos']['despesas_ana']['percentual']:.1f}%",
            resumo['compromissos']['despesas_ana']['descricao']
        ],
        [
            'Renda Filhos',
            format_currency(resumo['compromissos']['renda_filhos']['valor'], True),
            f"{resumo['compromissos']['renda_filhos']['percentual']:.1f}%",
            resumo['compromissos']['renda_filhos']['descricao']
        ],
        [
            'Doa√ß√µes',
            format_currency(resumo['compromissos']['doacoes']['valor'], True),
            f"{resumo['compromissos']['doacoes']['percentual']:.1f}%",
            resumo['compromissos']['doacoes']['descricao']
        ],
        [
            'TOTAL',
            format_currency(gerador.dados['total_compromissos'], True),
            f"{(gerador.dados['total_compromissos']/PATRIMONIO)*100:.1f}%",
            'Soma dos compromissos'
        ]
    ]
    
    compromissos_table = Table(compromissos_data, colWidths=[1.5*inch, 1.2*inch, 1*inch, 2.3*inch])
    compromissos_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e3a8a')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BACKGROUND', (0, -1), (-1, -1), colors.HexColor('#f1f5f9')),
        ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e2e8f0'))
    ]))
    
    elementos.append(compromissos_table)
    elementos.append(Spacer(1, 30))
    
    # Objetivos pessoais
    elementos.append(Paragraph("üè° OBJETIVOS PESSOAIS:", styles['CustomHeading']))
    
    objetivos_data = [
        ['Objetivo', 'Valor Dispon√≠vel', '% Patrim√¥nio', 'Status'],
        [
            'Fazenda Rural',
            format_currency(resumo['objetivos_pessoais']['fazenda']['valor_disponivel'], True),
            f"{resumo['objetivos_pessoais']['fazenda']['percentual']:.1f}%",
            'Vi√°vel' if resumo['objetivos_pessoais']['fazenda']['valor_disponivel'] > 0 else 'Invi√°vel'
        ],
        [
            'Arte/Galeria',
            format_currency(resumo['objetivos_pessoais']['arte_galeria']['valor'], True),
            f"{resumo['objetivos_pessoais']['arte_galeria']['percentual']:.1f}%",
            'Dispon√≠vel' if resumo['objetivos_pessoais']['arte_galeria']['valor'] > 0 else 'Indispon√≠vel'
        ]
    ]
    
    objetivos_table = Table(objetivos_data, colWidths=[1.5*inch, 1.5*inch, 1.2*inch, 1.8*inch])
    objetivos_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#059669')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e2e8f0'))
    ]))
    
    elementos.append(objetivos_table)
    elementos.append(Spacer(1, 30))
    
    # Asset Allocation
    elementos.append(Paragraph("üé® ASSET ALLOCATION:", styles['CustomHeading']))
    allocation_info = get_asset_allocation(gerador.params['perfil'], PATRIMONIO)
    
    allocation_text = f"<b>Perfil Escolhido:</b> {gerador.params['perfil'].title()}<br/><br/>"
    for item in allocation_info[:4]:  # Mostrar top 4 classes
        allocation_text += f"‚Ä¢ {item['nome']}: {item['percentual']}% ({format_currency(item['valor'], True)})<br/>"
    
    elementos.append(Paragraph(allocation_text, styles['Normal']))
    
    return elementos

def criar_pagina_cenarios_recomendacoes(gerador, styles):
    """Cria terceira p√°gina com cen√°rios e recomenda√ß√µes"""
    elementos = []
    dados_exec = gerador.gerar_dados_executivo()
    
    elementos.append(Paragraph("üîÆ AN√ÅLISE DE CEN√ÅRIOS", styles['CustomTitle']))
    elementos.append(Spacer(1, 20))
    
    # Cen√°rios r√°pidos
    cenarios = dados_exec['cenarios_rapidos']
    
    cenarios_data = [
        ['Cen√°rio', 'Taxa', 'Valor Fazenda', 'Status']
    ]
    
    for nome, dados in cenarios.items():
        if 'erro' not in dados:
            cenarios_data.append([
                nome.title(),
                f"{dados['taxa']}%",
                format_currency(dados['fazenda'], True),
                dados['status'].title()
            ])
    
    cenarios_table = Table(cenarios_data, colWidths=[1.5*inch, 1*inch, 1.8*inch, 1.7*inch])
    cenarios_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#7c3aed')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e2e8f0'))
    ]))
    
    elementos.append(cenarios_table)
    elementos.append(Spacer(1, 30))
    
    # Recomenda√ß√µes estrat√©gicas
    elementos.append(Paragraph("üéØ RECOMENDA√á√ïES ESTRAT√âGICAS:", styles['CustomHeading']))
    
    for i, recomendacao in enumerate(dados_exec['recomendacoes'][:4], 1):
        elementos.append(Paragraph(f"{i}. {recomendacao}", styles['Normal']))
        elementos.append(Spacer(1, 10))
    
    elementos.append(Spacer(1, 20))
    
    # Marcos temporais
    if dados_exec['marcos_temporais']:
        elementos.append(Paragraph("üìÖ MARCOS TEMPORAIS IMPORTANTES:", styles['CustomHeading']))
        
        for marco in dados_exec['marcos_temporais'][:3]:  # M√°ximo 3 marcos
            marco_text = f"<b>{marco['ano']}</b> (Ana aos {marco['idade_ana']} anos): {marco['evento']}"
            elementos.append(Paragraph(marco_text, styles['Normal']))
            elementos.append(Spacer(1, 8))
    
    # Rodap√©
    elementos.append(Spacer(1, 30))
    rodape_text = f"""
    <i>Relat√≥rio gerado em {gerador.timestamp.strftime('%d/%m/%Y √†s %H:%M')}<br/>
    CIMO Multi Family Office - Planejamento Patrimonial<br/>
    Este relat√≥rio √© baseado nas premissas e par√¢metros fornecidos e deve ser revisado periodicamente.</i>
    """
    elementos.append(Paragraph(rodape_text, styles['Normal']))
    
    return elementos

def gerar_pdf_tecnico(gerador):
    """Gera PDF do relat√≥rio t√©cnico (placeholder)"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    
    story = []
    styles = getSampleStyleSheet()
    
    story.append(Paragraph("RELAT√ìRIO T√âCNICO DETALHADO", styles['Title']))
    story.append(Paragraph("Em desenvolvimento - vers√£o completa em breve", styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Dados b√°sicos para demonstra√ß√£o
    dados_tec = gerador.gerar_dados_tecnico()
    story.append(Paragraph("METODOLOGIA:", styles['Heading2']))
    story.append(Paragraph(f"F√≥rmula VP: {dados_tec['metodologia']['valor_presente']['formula']}", styles['Normal']))
    
    doc.build(story)
    buffer.seek(0)
    return buffer

def gerar_pdf_simulacao(gerador):
    """Gera PDF do relat√≥rio de simula√ß√£o (placeholder)"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    
    story = []
    styles = getSampleStyleSheet()
    
    story.append(Paragraph("RELAT√ìRIO DE SIMULA√á√ÉO E CEN√ÅRIOS", styles['Title']))
    story.append(Paragraph("Em desenvolvimento - vers√£o completa em breve", styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Dados b√°sicos para demonstra√ß√£o
    dados_sim = gerador.gerar_dados_simulacao()
    story.append(Paragraph("STRESS TESTS:", styles['Heading2']))
    
    for nome, dados in dados_sim['stress_tests'].items():
        if 'erro' not in dados:
            story.append(Paragraph(f"‚Ä¢ {dados.get('cenario', nome)}", styles['Normal']))
    
    doc.build(story)
    buffer.seek(0)
    return buffer





# ================ FUN√á√ïES DE GR√ÅFICOS (mantidas do original) ================
def criar_grafico_compromissos(resultado):
    """Cria gr√°fico de compromissos em base64"""
    try:
        fig, ax = plt.subplots(figsize=(8, 6))
        
        labels = ['Despesas Ana', 'Renda Filhos', 'Doa√ß√µes', 'Fazenda']
        values = [
            resultado['despesas'],
            resultado['filhos'],
            resultado['doacoes'],
            max(resultado['fazenda'], 0)
        ]
        colors_chart = ['#1e3a8a', '#3b82f6', '#64748b', '#059669']
        
        ax.pie(values, labels=labels, colors=colors_chart, autopct='%1.1f%%', startangle=90)
        ax.set_title('Breakdown dos Compromissos', fontsize=14, fontweight='bold')
        
        plt.tight_layout()
        
        # Converter para base64
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight')
        buffer.seek(0)
        image_png = buffer.getvalue()
        buffer.close()
        plt.close()
        
        graphic = base64.b64encode(image_png)
        graphic = graphic.decode('utf-8')
        
        return graphic
    except Exception as e:
        print(f"‚ùå Erro ao criar gr√°fico de compromissos: {e}")
        return None

def criar_grafico_sensibilidade(sensibilidade):
    """Cria gr√°fico de sensibilidade em base64"""
    try:
        fig, ax = plt.subplots(figsize=(10, 6))
        
        taxas = [item['taxa'] for item in sensibilidade]
        valores = [item['fazenda'] / 1000000 for item in sensibilidade]  # Em milh√µes
        
        ax.plot(taxas, valores, marker='o', linewidth=3, markersize=8, color='#1e3a8a')
        ax.fill_between(taxas, valores, alpha=0.3, color='#1e3a8a')
        ax.set_xlabel('Taxa de Retorno Real (%)', fontsize=12)
        ax.set_ylabel('Valor Fazenda (R$ milh√µes)', fontsize=12)
        ax.set_title('An√°lise de Sensibilidade - Taxa de Retorno', fontsize=14, fontweight='bold')
        ax.grid(True, alpha=0.3)
        
        # Linha de refer√™ncia no zero
        ax.axhline(y=0, color='red', linestyle='--', alpha=0.7)
        
        plt.tight_layout()
        
        # Converter para base64
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight')
        buffer.seek(0)
        image_png = buffer.getvalue()
        buffer.close()
        plt.close()
        
        graphic = base64.b64encode(image_png)
        graphic = graphic.decode('utf-8')
        
        return graphic
    except Exception as e:
        print(f"‚ùå Erro ao criar gr√°fico de sensibilidade: {e}")
        return None

# ================ SISTEMA DE LOGO IMPLEMENTADO DA PRIMEIRA VERS√ÉO ================

@app.route('/logo.png')
def logo_png():
    """Serve a logo PNG da CIMO"""
    try:
        logo_path = os.path.join('templates', 'logo.png')
        
        if os.path.exists(logo_path):
            response = send_file(
                logo_path,
                mimetype='image/png',
                as_attachment=False,
                download_name='cimo-logo.png'
            )
            
            # Headers para otimiza√ß√£o
            response.headers['Cache-Control'] = 'public, max-age=3600'  # Cache por 1 hora
            response.headers['Access-Control-Allow-Origin'] = '*'
            response.headers['Content-Disposition'] = 'inline'
            
            print(f"‚úÖ Logo PNG servida: {logo_path}")
            return response
        else:
            print(f"‚ùå Logo PNG n√£o encontrada: {logo_path}")
            return logo_png_fallback()
            
    except Exception as e:
        print(f"‚ùå Erro ao servir logo PNG: {str(e)}")
        return logo_png_fallback()

def logo_png_fallback():
    """Fallback caso o PNG n√£o seja encontrado"""
    try:
        # Gerar um PNG simples programaticamente como fallback
        fig, ax = plt.subplots(figsize=(4, 1.2), dpi=100)
        ax.set_xlim(0, 10)
        ax.set_ylim(0, 3)
        ax.axis('off')
        
        # Texto CIMO
        ax.text(5, 1.5, 'CIMO', fontsize=24, fontweight='bold', 
                ha='center', va='center', color='#1e3a8a')
        ax.text(5, 0.8, 'Multi Family Office', fontsize=8, 
                ha='center', va='center', color='#64748b')
        
        # Salvar em buffer
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', bbox_inches='tight', 
                   transparent=True, facecolor='none', dpi=150)
        buffer.seek(0)
        plt.close()
        
        response = make_response(buffer.getvalue())
        response.headers['Content-Type'] = 'image/png'
        response.headers['Cache-Control'] = 'public, max-age=300'  # 5 minutos
        
        print("‚ö†Ô∏è Usando logo PNG de fallback")
        return response
        
    except Exception as e:
        print(f"‚ùå Erro no fallback PNG: {str(e)}")
        return jsonify({
            'erro': 'Logo n√£o encontrada',
            'path_esperado': 'templates/logo.png',
            'solucao': 'Certifique-se que o arquivo logo.png est√° na pasta templates/'
        }), 404

@app.route('/debug/logo')
def debug_logo():
    """Debug da logo para troubleshooting"""
    logo_path = os.path.join('templates', 'logo.png')
    
    debug_info = {
        'arquivo_existe': os.path.exists(logo_path),
        'path_completo': os.path.abspath(logo_path),
        'path_relativo': logo_path,
        'diretorio_atual': os.getcwd(),
        'arquivos_templates': [],
        'tamanho_arquivo': None
    }
    
    # Listar arquivos na pasta templates
    templates_dir = 'templates'
    if os.path.exists(templates_dir):
        debug_info['arquivos_templates'] = os.listdir(templates_dir)
    
    # Tamanho do arquivo se existir
    if os.path.exists(logo_path):
        debug_info['tamanho_arquivo'] = f"{os.path.getsize(logo_path)} bytes"
    
    html_debug = f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Debug Logo CIMO v4.1 CORRIGIDA</title>
        <style>
            body {{ font-family: Arial, sans-serif; padding: 20px; background: #f8fafc; }}
            .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }}
            .success {{ color: #059669; font-weight: bold; }}
            .error {{ color: #dc2626; font-weight: bold; }}
            .info {{ background: #f0f9ff; padding: 15px; margin: 15px 0; border-radius: 8px; border-left: 4px solid #3b82f6; }}
            img {{ max-width: 300px; border: 1px solid #e5e7eb; margin: 10px 0; border-radius: 8px; }}
            code {{ background: #f3f4f6; padding: 2px 6px; border-radius: 4px; font-family: monospace; }}
            .version {{ background: #1e3a8a; color: white; padding: 8px 16px; border-radius: 6px; display: inline-block; margin-bottom: 20px; }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="version">CIMO v4.1 CORRIGIDA - Debug Logo</div>
            <h1>üêõ Debug Logo CIMO</h1>
            
            <h2>üìä Status do Arquivo:</h2>
            <p class="{'success' if debug_info['arquivo_existe'] else 'error'}">
                Arquivo existe: {debug_info['arquivo_existe']}
            </p>
            
            <div class="info">
                <strong>üìÅ Paths:</strong><br>
                <strong>Path completo:</strong> <code>{debug_info['path_completo']}</code><br>
                <strong>Diret√≥rio atual:</strong> <code>{debug_info['diretorio_atual']}</code><br>
                <strong>Tamanho:</strong> {debug_info['tamanho_arquivo'] or 'N/A'}
            </div>
            
            <h2>üìÇ Arquivos na pasta templates/:</h2>
            <ul>
                {''.join([f'<li><code>{arquivo}</code></li>' for arquivo in debug_info['arquivos_templates']])}
            </ul>
            
            <h2>üñºÔ∏è Teste da Logo:</h2>
            <p>Logo atual: <img src="/logo.png" alt="Logo CIMO" style="height: 60px;"></p>
            
            <h2>üîß Solu√ß√µes:</h2>
            <ol>
                <li>Certifique-se que o arquivo est√° em: <code>templates/logo.png</code></li>
                <li>Verifique se o arquivo n√£o est√° corrompido</li>
                <li>Teste acessando diretamente: <a href="/logo.png">/logo.png</a></li>
                <li>Verifique permiss√µes de leitura do arquivo</li>
            </ol>
            
            <h2>üÜï Corre√ß√µes v4.1:</h2>
            <ul>
                <li>‚úÖ Renda vital√≠cia filhos (~55 anos)</li>
                <li>‚úÖ Liquidez real dos ativos</li>
                <li>‚úÖ Tributa√ß√£o sucess√≥ria (ITCMD)</li>
                <li>‚úÖ Valida√ß√µes robustas</li>
                <li>‚úÖ Sistema de logo implementado</li>
            </ul>
            
            <hr>
            <p>
                <a href="/dashboard" style="background: #1e3a8a; color: white; padding: 8px 16px; text-decoration: none; border-radius: 6px;">‚Üê Voltar ao Dashboard</a>
                <a href="/api/teste" style="background: #059669; color: white; padding: 8px 16px; text-decoration: none; border-radius: 6px; margin-left: 10px;">üß™ Testar API</a>
            </p>
            <p style="margin-top: 20px; color: #6b7280; font-size: 0.9rem;">
                <i>Debug gerado em {format_datetime_report()}</i>
            </p>
        </div>
    </body>
    </html>
    '''
    
    return html_debug


# ================ ROTAS PARA SISTEMA DE RELAT√ìRIOS ================

@app.route('/api/relatorio/<tipo>')
def gerar_relatorio_api(tipo):
    """API para gerar relat√≥rios em PDF"""
    try:
        debugMessage = print  # Para logs no servidor
        debugMessage(f"üìã Gerando relat√≥rio {tipo}")
        
        # Coletar par√¢metros
        params = {
            'taxa': float(request.args.get('taxa', 4.0)),
            'expectativa': int(request.args.get('expectativa', 90)),
            'despesas': float(request.args.get('despesas', 150000)),
            'perfil': request.args.get('perfil', 'moderado'),
            'inicio_renda_filhos': request.args.get('inicio_renda_filhos', 'falecimento'),
            'custo_fazenda': float(request.args.get('custo_fazenda', 2000000))
        }
        
        debugMessage(f"üìä Par√¢metros: {params}")
        
        # Calcular dados base
        dados_base = calcular_compromissos_v42_corrigido(
            params['taxa'], 
            params['expectativa'],
            params['despesas'],
            params['inicio_renda_filhos'],
            params['custo_fazenda'],
            params['perfil']
        )
        
        # Gerar relat√≥rio espec√≠fico
        gerador = RelatorioGenerator(params, dados_base)
        
        if tipo == 'executivo':
            pdf_buffer = gerar_pdf_executivo(gerador)
        elif tipo == 'tecnico':
            pdf_buffer = gerar_pdf_tecnico(gerador)
        elif tipo == 'simulacao':
            pdf_buffer = gerar_pdf_simulacao(gerador)
        else:
            return jsonify({'error': f'Tipo de relat√≥rio inv√°lido: {tipo}'}), 400
        
        # Retornar PDF
        response = make_response(pdf_buffer.getvalue())
        response.headers['Content-Type'] = 'application/pdf'
        response.headers['Content-Disposition'] = f'attachment; filename=relatorio_{tipo}_{datetime.now().strftime("%Y%m%d_%H%M")}.pdf'
        
        debugMessage(f"‚úÖ Relat√≥rio {tipo} gerado com sucesso")
        return response
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar relat√≥rio {tipo}: {str(e)}")
        return jsonify({'error': f'Erro interno: {str(e)}'}), 500

@app.route('/api/relatorio-preview/<tipo>')
def preview_relatorio(tipo):
    """API ULTRA-ROBUSTA para preview dos dados do relat√≥rio"""
    try:
        print(f"üîç Preview relat√≥rio {tipo} - vers√£o SAFE")
        
        # Par√¢metros com valores padr√£o seguros
        params = {
            'taxa': float(request.args.get('taxa', 4.0)),
            'expectativa': int(request.args.get('expectativa', 90)),
            'despesas': float(request.args.get('despesas', 150000)),
            'perfil': request.args.get('perfil', 'moderado'),
            'inicio_renda_filhos': request.args.get('inicio_renda_filhos', 'falecimento'),
            'custo_fazenda': float(request.args.get('custo_fazenda', 2000000))
        }
        
        # Tentar calcular dados base, com fallback se falhar
        try:
            dados_base = calcular_compromissos_v42_corrigido(
                params['taxa'], params['expectativa'], params['despesas'],
                params['inicio_renda_filhos'], params['custo_fazenda'], params['perfil']
            )
        except Exception as e:
            print(f"‚ö†Ô∏è Erro nos c√°lculos base, usando fallback: {e}")
            # Dados base de emerg√™ncia
            dados_base = {
                'fazenda_disponivel': 5000000,
                'percentual_fazenda': 7.7,
                'despesas': 35000000,
                'filhos': 15000000,
                'doacoes': 6000000
            }
        
        # Gerar relat√≥rio com classe SAFE
        try:
            gerador = RelatorioGenerator(params, dados_base)
            
            if tipo in ['executivo']:
                preview_data = gerador.gerar_dados_executivo()
            elif tipo in ['tecnico', 'detalhado']:
                preview_data = gerador.gerar_dados_tecnico()
            elif tipo in ['simulacao']:
                preview_data = gerador.gerar_dados_simulacao()
            else:
                preview_data = {'observacao': f'Tipo {tipo} em desenvolvimento'}
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na gera√ß√£o, usando dados m√≠nimos: {e}")
            preview_data = {
                'observacao': f'Preview {tipo} sendo processado',
                'status': 'em_desenvolvimento'
            }
        
        print(f"‚úÖ Preview {tipo} gerado com sucesso (vers√£o SAFE)")
        
        return jsonify({
            'success': True,
            'tipo': tipo,
            'parametros': params,
            'dados_base': {
                'fazenda_disponivel': dados_base.get('fazenda_disponivel', 0),
                'percentual_fazenda': dados_base.get('percentual_fazenda', 0),
                'status': 'vi√°vel' if dados_base.get('fazenda_disponivel', 0) > 0 else 'cr√≠tico'
            },
            'dados_preview': preview_data,
            'timestamp': format_datetime_report(),
            'versao': 'EMERGENCY_SAFE'
        })
        
        
    except Exception as e:
        print(f"‚ùå Erro geral no preview {tipo}: {str(e)}")
        # √öLTIMO RECURSO - resposta que SEMPRE funciona
        return jsonify({
            'success': True,
            'tipo': tipo,
            'dados_preview': {
                'observacao': f'Relat√≥rio {tipo} sendo preparado',
                'status': 'processando',
                'recomendacao': 'Tente novamente em alguns instantes'
            },
            'timestamp': datetime.now().isoformat(),
            'versao': 'FALLBACK_TOTAL'
        })

# ================ NOVO ENDPOINT PARA PROJE√á√ïES DETALHADAS ================
@app.route('/api/projecoes-detalhadas')
def projecoes_detalhadas():
    """
    Endpoint para proje√ß√µes detalhadas incluindo compra da fazenda
    """
    try:
        # Par√¢metros b√°sicos
        taxa = float(request.args.get('taxa', 4.0))
        expectativa = int(request.args.get('expectativa', 90))
        despesas = float(request.args.get('despesas', 150000))
        inicio_renda_filhos = request.args.get('inicio_renda_filhos', 'falecimento')
        perfil = request.args.get('perfil', 'moderado')
        
        # NOVOS PAR√ÇMETROS PARA FAZENDA
        custo_fazenda = float(request.args.get('custo_fazenda', 2000000))
        periodo_compra_fazenda = request.args.get('periodo_compra_fazenda')
        
        if periodo_compra_fazenda:
            periodo_compra_fazenda = int(periodo_compra_fazenda)
            if periodo_compra_fazenda <= 0:
                periodo_compra_fazenda = None
        
        print(f"üìä Proje√ß√µes detalhadas solicitadas:")
        print(f"   Taxa: {taxa}%, Expectativa: {expectativa}, Fazenda em: {periodo_compra_fazenda or 'imediato'} anos")
        
        # Calcular dados com fazenda
        resultado = calcular_compromissos_v43_com_fazenda(
            taxa, expectativa, despesas, inicio_renda_filhos,
            custo_fazenda, perfil, periodo_compra_fazenda
        )
        
        # Gerar proje√ß√£o detalhada
        anos_projecao = min(40, max(20, (expectativa - IDADE_ANA) + 10))
        
        valor_fazenda_futuro = resultado.get('valor_fazenda_futuro', custo_fazenda)
        projecao_anual = gerar_projecao_fluxo_com_fazenda(
            taxa, expectativa, despesas, anos_projecao, inicio_renda_filhos,
            periodo_compra_fazenda, valor_fazenda_futuro
        )
        
        # Asset allocation temporal (simplificado para MVP)
        allocation_temporal = []
        for i, item in enumerate(projecao_anual[:20]):  # Primeiros 20 anos
            liquidez_pct = item['liquidez_necessaria_pct']
            allocation_temporal.append({
                'ano': item['ano'],
                'renda_fixa_br': max(20, 70 - liquidez_pct),  # Reduz conforme aumenta liquidez
                'renda_fixa_int': 15,
                'acoes_br': max(5, 15 - (liquidez_pct // 2)),
                'acoes_int': 10,
                'imoveis': 3,
                'liquidez': liquidez_pct
            })
        
        # Marcos temporais incluindo fazenda
        marcos_temporais = []
        
        # Marco existente: fim doa√ß√µes
        marcos_temporais.append({
            'ano': 2025 + 15,
            'idade_ana': IDADE_ANA + 15,
            'evento': 'Fim das Doa√ß√µes',
            'tipo': 'financeiro'
        })
        
        # NOVO MARCO: compra da fazenda
        if periodo_compra_fazenda:
            marcos_temporais.append({
                'ano': 2025 + periodo_compra_fazenda,
                'idade_ana': IDADE_ANA + periodo_compra_fazenda,
                'evento': f'Compra da Fazenda ({format_currency(valor_fazenda_futuro, True)})',
                'tipo': 'fazenda'
            })
        
        # Marco: expectativa de vida
        marcos_temporais.append({
            'ano': 2025 + (expectativa - IDADE_ANA),
            'idade_ana': expectativa,
            'evento': 'Expectativa de Vida Ana',
            'tipo': 'pessoal'
        })
        
        return jsonify({
            'success': True,
            'projecao_anual': projecao_anual,
            'allocation_temporal': allocation_temporal,
            'marcos_temporais': marcos_temporais,
            'fazenda_analysis': resultado['fazenda_analysis'],
            'fazenda_disponivel_periodo': resultado['fazenda_disponivel'],
            'parametros': {
                'taxa': taxa,
                'expectativa': expectativa,
                'periodo_compra_fazenda': periodo_compra_fazenda,
                'valor_fazenda_atual': custo_fazenda,
                'valor_fazenda_futuro': valor_fazenda_futuro
            },
            'timestamp': get_current_datetime_sao_paulo().isoformat(),
            'versao': '4.3-PROJECOES-FAZENDA'
        })
        
    except Exception as e:
        print(f"‚ùå Erro em proje√ß√µes detalhadas: {str(e)}")
        return jsonify({
            'success': False,
            'erro': str(e),
            'versao': '4.3-PROJECOES-FAZENDA'
        }), 500



@app.route('/')
def home():
    """P√°gina inicial com informa√ß√µes da v4.1 CORRIGIDA COM LOGO"""
    return f'''
    <h1>üè¢ Cimo Family Office</h1>
    <h2>üìä Plano Patrimonial Ana - v4.1 CORRIGIDA COM LOGO</h2>
    
    <h3>‚ú® Corre√ß√µes Implementadas v4.1:</h3>
    <ul>
        <li>‚úÖ Renda VITAL√çCIA dos filhos (~55 anos)</li>
        <li>‚úÖ Liquidez real dos ativos por perfil</li>
        <li>‚úÖ Tributa√ß√£o sucess√≥ria (ITCMD)</li>
        <li>‚úÖ Valida√ß√£o de capacidade para despesas simult√¢neas</li>
        <li>‚úÖ Valida√ß√£o do custo da fazenda</li>
        <li>‚úÖ Stress test de longevidade</li>
        <li>‚úÖ Sistema de logo implementado</li>
        <li>‚úÖ Todas as f√≥rmulas corrigidas</li>
    </ul>
    
    <h3>üîó Links:</h3>
    <p><a href="/dashboard">üìà Dashboard Interativo</a></p>
    <p><a href="/api/teste">üß™ Testar API</a></p>
    <p><a href="/api/dados">üìä Ver Dados JSON</a></p>
    <p><a href="/logo.png">üñºÔ∏è Logo CIMO</a></p>
    <p><a href="/debug/logo">üêõ Debug Logo</a></p>
    
    <hr>
    <p><i>CIMO Family Office v4.1 CORRIGIDA COM LOGO - {format_datetime_report()}</i></p>
    '''

@app.route('/dashboard')
def dashboard():
    """Dashboard principal"""
    try:
           return render_template('index.html')
    except Exception as e:
        return f'''
        <h1>‚ùå Erro</h1>
        <p>Erro ao carregar dashboard: {str(e)}</p>
        <p><a href="/">‚Üê Voltar</a></p>
        ''', 500

@app.route('/api/dados')
def api_dados_v43():
    """API principal - VERS√ÉO v4.3 COM FAZENDA"""
    try:
        # Par√¢metros b√°sicos
        taxa = float(request.args.get('taxa', 4.0))
        expectativa = int(request.args.get('expectativa', 90))
        despesas = float(request.args.get('despesas', 150000))
        inicio_renda_filhos = request.args.get('inicio_renda_filhos', 'falecimento')
        custo_fazenda = float(request.args.get('custo_fazenda', 2_000_000))
        perfil_investimento = request.args.get('perfil', 'moderado')
        
        # NOVO PAR√ÇMETRO: per√≠odo de compra da fazenda
        periodo_compra_fazenda = request.args.get('periodo_compra_fazenda')
        if periodo_compra_fazenda:
            try:
                periodo_compra_fazenda = int(periodo_compra_fazenda)
                if periodo_compra_fazenda <= 0:
                    periodo_compra_fazenda = None
            except:
                periodo_compra_fazenda = None
        
        print(f"üì• Par√¢metros recebidos v4.3 COM FAZENDA:")
        print(f"   Taxa: {taxa}% (real), Expectativa: {expectativa}, Fazenda: {periodo_compra_fazenda or 'imediato'} anos")
        
        # USAR FUN√á√ÉO v4.3 COM FAZENDA
        resultado = calcular_compromissos_v43_com_fazenda(
            taxa, expectativa, despesas, inicio_renda_filhos, 
            custo_fazenda, perfil_investimento, periodo_compra_fazenda
        )
        
        status = determinar_status(resultado['fazenda_disponivel'], resultado['percentual_fazenda'])
        
        # Asset allocation
        allocation = get_asset_allocation(perfil_investimento, PATRIMONIO)
        
        response_data = {
            'success': True,
            'patrimonio': PATRIMONIO,
            'resultado': {
                'fazenda_disponivel': resultado['fazenda_disponivel'],
                'total_compromissos': resultado['total_compromissos'],
                'percentual_fazenda': resultado['percentual_fazenda'],
                'despesas': resultado['despesas'],
                'filhos': resultado['filhos'],
                'doacoes': resultado['doacoes'],
                'arte': resultado['arte'],
                'percentual_arte': resultado['percentual_arte'],
                
                # NOVOS CAMPOS v4.3
                'fazenda_analysis': resultado['fazenda_analysis'],
                'periodo_compra_fazenda': resultado['periodo_compra_fazenda'],
                'valor_fazenda_atual': resultado['valor_fazenda_atual'],
                'valor_fazenda_futuro': resultado['valor_fazenda_futuro']
            },
            'allocation': allocation,
            'status': status,
            'versao': '4.3-FAZENDA-LIQUIDEZ',
            'timestamp': get_current_datetime_sao_paulo().isoformat()
        }
        
        print(f"‚úÖ v4.3 - Fazenda em {periodo_compra_fazenda or 'imediato'} anos: {format_currency(resultado['fazenda_disponivel'], True)}")
        
        return jsonify(response_data)
        
    except Exception as e:
        print(f"‚ùå Erro na API dados v4.3: {str(e)}")
        return jsonify({
            'success': False,
            'erro': str(e),
            'versao': '4.3-FAZENDA-LIQUIDEZ',
            'timestamp': get_current_datetime_sao_paulo().isoformat()
        }), 500

@app.route('/api/teste')
def api_teste():
    """Teste da API v4.1 CORRIGIDA COM LOGO"""
    return jsonify({
        'status': 'OK',
        'service': 'Cimo Family Office API',
        'version': '4.1-CORRIGIDA-COM-LOGO',
        'correcoes_implementadas': [
            'Renda vital√≠cia filhos (~55 anos)',
            'Liquidez real dos ativos',
            'Tributa√ß√£o sucess√≥ria (ITCMD)',
            'Valida√ß√£o capacidade dual',
            'Valida√ß√£o custo fazenda',
            'Stress test longevidade',
            'Sistema de logo implementado',
            'Todas as f√≥rmulas corrigidas'
        ],
        'patrimonio': format_currency(PATRIMONIO, True),
        'cliente': f'Ana, {IDADE_ANA} anos',
        'server_time': format_datetime_report(),
        'logo_funcionando': True,
        'endpoints': {
            'dashboard': '/dashboard',
            'dados': '/api/dados',
            'teste': '/api/teste',
            'logo': '/logo.png',
            'debug_logo': '/debug/logo'
        },
        'teste_rapido': {
            'taxa_4_porcento': '4% a.a. (real)',
            'resultado_simulado': 'Fazenda provavelmente NEGATIVA com corre√ß√µes',
            'acao_requerida': 'Ajustar par√¢metros do plano'
        }
    })

# ================ EXEMPLO DE TESTE COM LOGO ================
@app.route('/api/teste-correcoes')
def teste_correcoes():
    """Endpoint para testar as corre√ß√µes implementadas"""
    try:
        print("\n" + "="*80)
        print("üß™ TESTANDO CORRE√á√ïES v4.1 COM LOGO")
        print("="*80)
        
        # Teste com par√¢metros do case original
        resultado_original = calcular_compromissos_v42_corrigido(
            taxa=4.0,
            expectativa=90, 
            despesas=150_000,
            inicio_renda_filhos='falecimento',
            custo_fazenda=2_000_000,
            perfil_investimento='moderado'
        )
        
        status = determinar_status(resultado_original['fazenda_disponivel'], resultado_original['percentual_fazenda'])
        
        return jsonify({
            'success': True,
            'versao': '4.1-CORRIGIDA-COM-LOGO',
            'logo_funcionando': True,
            'teste': {
                'parametros': {
                    'taxa': '4.0% real',
                    'expectativa': '90 anos',
                    'despesas': 'R$ 150k/m√™s',
                    'inicio_renda_filhos': 'falecimento',
                    'perfil': 'moderado'
                },
                'resultados_corrigidos': {
                'patrimonio_disponivel': format_currency(resultado_original['patrimonio_disponivel']),  # ‚úÖ Corrigido
                'patrimonio_total': format_currency(resultado_original['patrimonio_total']),           # ‚úÖ Corrigido
                'vp_despesas_ana': format_currency(resultado_original['despesas']),
                'vp_renda_filhos_vitalicia': format_currency(resultado_original['filhos']),
                'anos_renda_filhos': resultado_original['anos_renda_filhos'],
                'vp_doacoes': format_currency(resultado_original['doacoes']),
                'total_compromissos': format_currency(resultado_original['total_compromissos']),
                'valor_fazenda': format_currency(resultado_original['fazenda_disponivel']),
                'percentual_fazenda': f"{resultado_original['percentual_fazenda']:.1f}%",
                'valor_arte': format_currency(resultado_original['arte']),
                'status': status
            },
                'analise': {
                    'plano_viavel': status == 'vi√°vel',
                    'requer_ajustes': status in ['cr√≠tico', 'aten√ß√£o'],
                    'principal_diferenca': 'Renda filhos agora √© vital√≠cia (~55 anos) vs 25 anos anterior'
                }
            }
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'erro': str(e),
            'versao': '4.1-CORRIGIDA-COM-LOGO'
        }), 500

# ================ MIDDLEWARE E HANDLERS ================
@app.errorhandler(404)
def not_found(error):
    """Handler para p√°ginas n√£o encontradas"""
    return jsonify({
        'erro': 'Endpoint n√£o encontrado',
        'versao': '4.1-CORRIGIDA-COM-LOGO',
        'endpoints_disponiveis': [
            '/',
            '/dashboard',
            '/api/dados',
            '/api/teste',
            '/logo.png',
            '/debug/logo',
            '/api/teste-correcoes'
        ]
    }), 404

@app.errorhandler(500)
def internal_error(error):
    """Handler para erros internos"""
    return jsonify({
        'erro': 'Erro interno do servidor',
        'message': 'Contate o administrador do sistema',
        'versao': '4.1-CORRIGIDA-COM-LOGO',
        'timestamp': format_datetime_report()
    }), 500

@app.before_request
def log_request():
    """Log das requisi√ß√µes (desenvolvimento)"""
    if app.debug:
        timestamp = get_current_datetime_sao_paulo().strftime('%H:%M:%S')
        print(f"[{timestamp}] {request.method} {request.path}")

@app.after_request
def after_request(response):
    """Headers de seguran√ßa e CORS"""
    response.headers.add('X-Content-Type-Options', 'nosniff')
    response.headers.add('X-Frame-Options', 'DENY')
    response.headers.add('X-XSS-Protection', '1; mode=block')
    response.headers.add('X-Version', '4.1-CORRIGIDA-COM-LOGO')
    return response

# ================ INICIALIZA√á√ÉO ================
if __name__ == '__main__':
    print("=" * 80)
    print("üöÄ Cimo Family Office - v4.1 CORRIGIDA COM LOGO")
    print("=" * 80)
    print("‚úÖ TODAS AS CORRE√á√ïES + LOGO IMPLEMENTADAS:")
    print("   ‚Ä¢ Renda VITAL√çCIA dos filhos (~55 anos)")
    print("   ‚Ä¢ Liquidez real dos ativos")
    print("   ‚Ä¢ Tributa√ß√£o sucess√≥ria (ITCMD)")
    print("   ‚Ä¢ Valida√ß√µes robustas")
    print("   ‚Ä¢ Stress test de longevidade")
    print("   ‚Ä¢ Sistema de logo funcionando")
    print("=" * 80)
    print("üåê Endpoints principais:")
    print("   ‚Ä¢ Dashboard: http://localhost:5000/dashboard")
    print("   ‚Ä¢ API Corrigida: http://localhost:5000/api/dados")
    print("   ‚Ä¢ Logo: http://localhost:5000/logo.png")
    print("   ‚Ä¢ Debug Logo: http://localhost:5000/debug/logo")
    print("   ‚Ä¢ Teste Corre√ß√µes: http://localhost:5000/api/teste-correcoes")
    print("=" * 80)
    print(f"üïê Servidor iniciado em: {format_datetime_report()}")
    print("=" * 80)
    
    # Verificar se index.html existe
    if not os.path.exists('templates/index.html'):
        print("‚ö†Ô∏è  AVISO: index.html n√£o encontrado na pasta templates/!")
        print("   O dashboard n√£o funcionar√° at√© que o arquivo seja criado.")
        print("=" * 80)
    else:
        print("‚úÖ index.html encontrado com sucesso!")
    
    # Verificar se logo.png existe
    if not os.path.exists('templates/logo.png'):
        print("‚ö†Ô∏è  AVISO: logo.png n√£o encontrado na pasta templates/!")
        print("   Ser√° usado fallback autom√°tico.")
    else:
        print("‚úÖ logo.png encontrado com sucesso!")
    
    print("=" * 80)
    
    # Executar servidor
    app.run(
        debug=True, 
        host='0.0.0.0', 
        port=5000,
        use_reloader=True,
        threaded=True
    )